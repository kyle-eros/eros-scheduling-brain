config {
  type: "table",
  schema: "eros_messaging_mart",
  partitionBy: "recommendation_date",
  clusterBy: ["page_handle", "message_type", "recommendation_rank"],
  requirePartitionFilter: true,
  description: "Daily scheduling feed blending mandatory drips, renewals, PPVs, and tip campaigns with tier-aware AI scoring.",
  labels: {app: "eros", domain: "messaging", layer: "mart"},
  tags: ["messaging_mart", "enhanced_scheduling"],
  dependencies: ["creator_tier_assignments", "tier_baseline_templates", "creator_heatmap", "daily_recommendations"]
}

WITH active_creators AS (
  SELECT
    cta.username_std,
    cta.page_handle,
    cta.page_type,
    cta.final_page_type,
    cta.full_tier_assignment,
    cta.messaging_strategy,
    tbt.base_tier,
    tbt.base_daily_quota,
    tbt.min_spacing_minutes,
    tbt.randomize_offset_minutes,
    tbt.min_drip_bumps,
    tbt.max_drip_bumps,
    tbt.min_renewals,
    tbt.max_renewals,
    tbt.min_daily_ppvs,
    tbt.max_daily_ppvs,
    tbt.max_tip_campaigns_per_week,
    tbt.drip_schedule,
    tbt.renewal_schedule,
    tbt.ppv_windows,
    tbt.premium_price_range,
    tbt.mid_price_range,
    tbt.teaser_price_range
  FROM ${ref("creator_tier_assignments")} cta
  JOIN ${ref("tier_baseline_templates")} tbt
    ON cta.full_tier_assignment = tbt.tier_id
  WHERE cta.assignment_date = CURRENT_DATE()
    AND cta.performance_risk != 'HIGH_RISK'
),

-- ===== DRIP BUMPS =====
drip_slots AS (
  SELECT
    ac.username_std,
    ac.page_handle,
    ac.page_type,
    ac.final_page_type,
    ac.full_tier_assignment,
    ac.messaging_strategy,
    ac.base_tier,
    ac.base_daily_quota,
    ac.min_spacing_minutes,
    ac.min_drip_bumps,
    ac.max_drip_bumps,
    drip.label AS slot_label,
    drip.type AS slot_type,
    drip.hour AS slot_hour,
    COALESCE(drip.randomize_minutes, ac.randomize_offset_minutes, 0) AS randomize_minutes,
    TIMESTAMP_ADD(
      TIMESTAMP(CONCAT(CAST(CURRENT_DATE() AS STRING), ' ', drip.base_time)),
      INTERVAL CAST(
        FLOOR(RAND() * (2 * COALESCE(drip.randomize_minutes, ac.randomize_offset_minutes, 0) + 1))
        - COALESCE(drip.randomize_minutes, ac.randomize_offset_minutes, 0)
      AS INT64) MINUTE
    ) AS recommended_send_ts
  FROM active_creators ac
  CROSS JOIN UNNEST(ac.drip_schedule) AS drip
),

drip_ranked AS (
  SELECT
    ds.*,
    ROW_NUMBER() OVER (
      PARTITION BY ds.username_std
      ORDER BY COALESCE(hm.avg_rpm, 0.4) DESC, ds.slot_hour
    ) AS recommendation_rank,
    COALESCE(hm.avg_rpm, 0.4) AS timing_score,
    COALESCE(hm.confidence_level, 'LOW') AS timing_confidence,
    MAX(COALESCE(hm.avg_rpm, 0.4)) OVER (PARTITION BY ds.username_std) AS max_rpm_for_creator
  FROM drip_slots ds
  LEFT JOIN ${ref("creator_heatmap")} hm
    ON hm.username_std = ds.username_std
   AND hm.local_day_of_week = FORMAT_DATE('%A', CURRENT_DATE())
   AND hm.local_hour = ds.slot_hour
),

drip_recommendations AS (
  SELECT
    username_std,
    page_handle,
    page_type,
    final_page_type,
    full_tier_assignment,
    CURRENT_DATE() AS recommendation_date,
    recommended_send_ts,
    'drip_bump' AS message_type,
    slot_type AS message_subtype,
    slot_label AS slot_description,
    recommendation_rank,
    COALESCE(SAFE_DIVIDE(timing_score, NULLIF(max_rpm_for_creator, 0)), 0.4) * 0.6
      + CASE timing_confidence WHEN 'HIGH' THEN 0.3 WHEN 'MEDIUM' THEN 0.2 ELSE 0.1 END
      + CASE messaging_strategy
          WHEN 'conversion_aggressive' THEN 0.1
          WHEN 'conversion_intensive' THEN 0.1
          ELSE 0.05
        END AS recommendation_score,
    timing_confidence,
    'MANDATORY' AS price_tier,
    0.0 AS suggested_price,
    GREATEST(70, 100 - (recommendation_rank - 1) * 5) AS fatigue_safety_score,
    base_daily_quota AS daily_limit,
    TRUE AS is_mandatory,
    CONCAT('Mandatory drip • ', slot_label, ' • Tier ', full_tier_assignment, ' • ', timing_confidence, ' timing confidence') AS recommendation_reason,
    CASE
      WHEN slot_hour BETWEEN 6 AND 11 THEN 'morning'
      WHEN slot_hour BETWEEN 12 AND 17 THEN 'afternoon'
      WHEN slot_hour BETWEEN 18 AND 23 THEN 'evening'
      ELSE 'late_night'
    END AS time_energy_required,
    CASE
      WHEN slot_hour BETWEEN 6 AND 11 THEN 'Prep warm morning authenticity captions.'
      WHEN slot_hour BETWEEN 12 AND 17 THEN 'Use playful afternoon captions.'
      WHEN slot_hour BETWEEN 18 AND 23 THEN 'Lean into evening hype and FOMO.'
      ELSE 'Go intimate with sleepy late-night confession captions.'
    END AS caption_guidance,
    min_spacing_minutes
  FROM drip_ranked
  WHERE recommendation_rank <= COALESCE(max_drip_bumps, 6)
),

-- ===== RENEWALS =====
renewal_slots AS (
  SELECT
    ac.username_std,
    ac.page_handle,
    ac.page_type,
    ac.final_page_type,
    ac.full_tier_assignment,
    ac.messaging_strategy,
    ac.base_tier,
    ac.base_daily_quota,
    ac.min_spacing_minutes,
    ac.min_renewals,
    ac.max_renewals,
    renewal.label AS slot_label,
    renewal.type AS slot_type,
    renewal.hour AS slot_hour,
    TIMESTAMP(CONCAT(CAST(CURRENT_DATE() AS STRING), ' ', renewal.base_time)) AS recommended_send_ts
  FROM active_creators ac
  CROSS JOIN UNNEST(ac.renewal_schedule) AS renewal
),

renewal_ranked AS (
  SELECT
    rs.*,
    ROW_NUMBER() OVER (
      PARTITION BY rs.username_std
      ORDER BY COALESCE(hm.avg_rpm, 0.4) DESC, rs.slot_hour
    ) AS recommendation_rank,
    COALESCE(hm.avg_rpm, 0.4) AS timing_score,
    COALESCE(hm.confidence_level, 'LOW') AS timing_confidence,
    MAX(COALESCE(hm.avg_rpm, 0.4)) OVER (PARTITION BY rs.username_std) AS max_rpm_for_creator
  FROM renewal_slots rs
  LEFT JOIN ${ref("creator_heatmap")} hm
    ON hm.username_std = rs.username_std
   AND hm.local_day_of_week = FORMAT_DATE('%A', CURRENT_DATE())
   AND hm.local_hour = rs.slot_hour
),

renewal_recommendations AS (
  SELECT
    username_std,
    page_handle,
    page_type,
    final_page_type,
    full_tier_assignment,
    CURRENT_DATE() AS recommendation_date,
    recommended_send_ts,
    'renewal_campaign' AS message_type,
    slot_type AS message_subtype,
    slot_label AS slot_description,
    recommendation_rank,
    COALESCE(SAFE_DIVIDE(timing_score, NULLIF(max_rpm_for_creator, 0)), 0.4) * 0.5
      + CASE timing_confidence WHEN 'HIGH' THEN 0.35 WHEN 'MEDIUM' THEN 0.25 ELSE 0.15 END
      + 0.15 AS recommendation_score,
    timing_confidence,
    'CAMPAIGN' AS price_tier,
    0.0 AS suggested_price,
    85 AS fatigue_safety_score,
    base_daily_quota AS daily_limit,
    TRUE AS is_mandatory,
    CONCAT('Renewal push • ', slot_label, ' • Tier ', full_tier_assignment) AS recommendation_reason,
    CASE
      WHEN slot_hour BETWEEN 6 AND 11 THEN 'morning'
      WHEN slot_hour BETWEEN 12 AND 17 THEN 'afternoon'
      WHEN slot_hour = 0 THEN 'midnight'
      ELSE 'evening'
    END AS time_energy_required,
    CASE
      WHEN slot_hour BETWEEN 6 AND 11 THEN 'Lean into gratitude + new month energy.'
      WHEN slot_hour BETWEEN 12 AND 17 THEN 'Use afternoon reminder captions.'
      WHEN slot_hour = 0 THEN 'Urgent midnight renewals and deadline language.'
      ELSE 'Evening renewals with proof and urgency.'
    END AS caption_guidance,
    min_spacing_minutes
  FROM renewal_ranked
  WHERE recommendation_rank <= COALESCE(max_renewals, 2)
),

-- ===== PPV WINDOWS =====
ppv_base AS (
  SELECT
    dr.username_std,
    dr.page_handle,
    dr.page_type,
    dr.final_page_type,
    dr.full_tier_assignment,
    dr.messaging_strategy,
    dr.recommendation_date,
    dr.recommended_send_ts,
    dr.recommendation_rank,
    dr.recommendation_score,
    dr.timing_confidence,
    dr.price_tier,
    dr.suggested_price,
    dr.fatigue_safety_score,
    dr.daily_limit,
    dr.recommendation_reason,
    dr.in_tier_window,
    dr.adjustment_rule
  FROM ${ref("daily_recommendations")} dr
  WHERE dr.recommendation_date = CURRENT_DATE()
),

ppv_recommendations AS (
  SELECT
    pb.username_std,
    pb.page_handle,
    pb.page_type,
    pb.final_page_type,
    pb.full_tier_assignment,
    pb.recommendation_date,
    pb.recommended_send_ts,
    'ppv' AS message_type,
    CASE WHEN pb.in_tier_window THEN 'tier_window' ELSE 'exploratory' END AS message_subtype,
    CONCAT('PPV window ', pb.recommendation_rank) AS slot_description,
    pb.recommendation_rank,
    pb.recommendation_score,
    pb.timing_confidence,
    pb.price_tier,
    pb.suggested_price,
    pb.fatigue_safety_score,
    LEAST(
      COALESCE(ac.max_daily_ppvs, pb.daily_limit),
      pb.daily_limit
    ) AS daily_limit,
    FALSE AS is_mandatory,
    pb.recommendation_reason,
    CASE
      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 6 AND 11 THEN 'morning'
      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 12 AND 17 THEN 'afternoon'
      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 18 AND 23 THEN 'evening'
      ELSE 'late_night'
    END AS time_energy_required,
    CASE
      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 6 AND 11 THEN 'Prime morning PPV: authentic daily start.'
      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 12 AND 17 THEN 'Afternoon PPV: playful and conversational.'
      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 18 AND 23 THEN 'Prime-time PPV: high-energy tease + social proof.'
      ELSE 'Late-night PPV: intimate, last-call positioning.'
    END AS caption_guidance,
    COALESCE(ac.min_spacing_minutes, 90) AS min_spacing_minutes
  FROM ppv_base pb
  LEFT JOIN active_creators ac
    ON pb.username_std = ac.username_std
),

-- ===== TIP CAMPAIGNS =====
tip_candidates AS (
  SELECT
    ac.username_std,
    ac.page_handle,
    ac.page_type,
    ac.final_page_type,
    ac.full_tier_assignment,
    ac.base_daily_quota,
    ac.min_spacing_minutes,
    ac.max_tip_campaigns_per_week,
    ROW_NUMBER() OVER (PARTITION BY ac.username_std ORDER BY ac.username_std) AS recommendation_rank
  FROM active_creators ac
  WHERE ac.max_tip_campaigns_per_week > 0
),

tip_recommendations AS (
  SELECT
    username_std,
    page_handle,
    page_type,
    final_page_type,
    full_tier_assignment,
    CURRENT_DATE() AS recommendation_date,
    TIMESTAMP_ADD(
      TIMESTAMP(CONCAT(CAST(CURRENT_DATE() AS STRING), ' 15:00')),
      INTERVAL CAST(FLOOR(RAND() * 120) AS INT64) MINUTE
    ) AS recommended_send_ts,
    'tip_campaign' AS message_type,
    'afternoon_push' AS message_subtype,
    'Afternoon tip opportunity' AS slot_description,
    recommendation_rank,
    0.55 AS recommendation_score,
    'MEDIUM' AS timing_confidence,
    'TIP' AS price_tier,
    0.0 AS suggested_price,
    70 AS fatigue_safety_score,
    base_daily_quota AS daily_limit,
    FALSE AS is_mandatory,
    'Optional tip: appreciation / social proof window.' AS recommendation_reason,
    'afternoon' AS time_energy_required,
    'Lean into appreciation captions with quick proof.' AS caption_guidance,
    min_spacing_minutes
  FROM tip_candidates
  WHERE recommendation_rank <= max_tip_campaigns_per_week
),

-- ===== COMBINE ALL STREAMS =====
combined AS (
  SELECT * FROM drip_recommendations
  UNION ALL
  SELECT * FROM renewal_recommendations
  UNION ALL
  SELECT * FROM ppv_recommendations
  UNION ALL
  SELECT * FROM tip_recommendations
),

sequenced AS (
  SELECT
    c.*,
    LAG(recommended_send_ts) OVER (
      PARTITION BY username_std
      ORDER BY recommended_send_ts
    ) AS previous_send_ts
  FROM combined c
),

final AS (
  SELECT
    username_std,
    page_handle,
    page_type,
    final_page_type,
    full_tier_assignment,
    recommendation_date,
    recommended_send_ts,
    message_type,
    message_subtype,
    slot_description,
    recommendation_rank,
    recommendation_score,
    timing_confidence,
    price_tier,
    suggested_price,
    fatigue_safety_score,
    daily_limit,
    is_mandatory,
    recommendation_reason,
    time_energy_required,
    caption_guidance,
    CASE
      WHEN previous_send_ts IS NULL THEN TRUE
      WHEN min_spacing_minutes IS NULL THEN TRUE
      WHEN TIMESTAMP_DIFF(recommended_send_ts, previous_send_ts, MINUTE) >= min_spacing_minutes THEN TRUE
      ELSE FALSE
    END AS spacing_ok
  FROM sequenced
)

SELECT
  username_std,
  page_handle,
  page_type,
  final_page_type,
  full_tier_assignment,
  recommendation_date,
  recommended_send_ts,
  message_type,
  message_subtype,
  slot_description,
  recommendation_rank,
  recommendation_score,
  timing_confidence,
  price_tier,
  suggested_price,
  fatigue_safety_score,
  daily_limit,
  is_mandatory,
  CASE
    WHEN message_type IN ('drip_bump', 'renewal_campaign') THEN 'AI_OPTIMIZED_BASELINE'
    WHEN recommendation_score >= 0.8 THEN 'HIGH_OPPORTUNITY'
    WHEN recommendation_score >= 0.6 THEN 'GOOD_OPPORTUNITY'
    WHEN recommendation_score >= 0.4 THEN 'FAIR_OPPORTUNITY'
    ELSE 'LOW_CONFIDENCE'
  END AS opportunity_quality,
  recommendation_reason,
  time_energy_required,
  caption_guidance,
  spacing_ok,
  CURRENT_TIMESTAMP() AS created_at
FROM final
WHERE is_mandatory OR recommendation_rank <= daily_limit
ORDER BY username_std, recommended_send_ts
