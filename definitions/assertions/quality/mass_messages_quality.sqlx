config {
  disabled: true,
  type: "assertion",
  schema: "eros_assertions",
  name: "mass_messages_quality",
  description: "Data quality checks for mass_messages table",
  tags: ["quality", "mass_messages"],
}

/* QUALITY CHECKS FOR mass_messages */

-- Compose checks as UNION ALL of failure rows
SELECT * FROM (
  -- Check 1: duplicate message_sk in the last 14 days
  SELECT
    'DUPLICATE_MESSAGE_SK' AS failing_row_condition,
    message_sk,
    COUNT(*) AS dup_count
  FROM ${ref("mass_messages")}
  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  GROUP BY message_sk
  HAVING COUNT(*) > 1

  UNION ALL

  -- Check 2: NULL keys (should not happen)
  SELECT
    'NULL_KEYS' AS failing_row_condition,
    message_sk,
    1 AS cnt
  FROM ${ref("mass_messages")}
  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
    AND (message_sk IS NULL OR username_std IS NULL OR sending_date IS NULL)

  UNION ALL

  -- Check 3: Invalid date ranges
  SELECT
    'INVALID_DATES' AS failing_row_condition,
    message_sk,
    1 AS cnt
  FROM ${ref("mass_messages")}
  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
    AND (sending_date < DATE '2020-01-01' OR sending_date > DATE '2030-01-01')

  UNION ALL

  -- Check 4: Invalid prices
  SELECT
    'INVALID_PRICES' AS failing_row_condition,
    message_sk,
    1 AS cnt
  FROM ${ref("mass_messages")}
  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
    AND price IS NOT NULL
    AND (price < 0 OR price > 1000)
) AS failures