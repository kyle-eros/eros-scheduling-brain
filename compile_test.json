{
    "tables": [
        {
            "type": "table",
            "target": {
                "schema": "eros_core_dim",
                "name": "dim_creator_timezone",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH normalized_creators AS (\n  SELECT\n    LOWER(REGEXP_REPLACE(TRIM(username_std), r'[^a-z0-9_]', '_')) AS username_std_norm,\n    snapshot_tz,\n    snapshot_ts_utc\n  FROM `of-scheduler-proj.eros_source.creator_statistics_final`\n  WHERE username_std IS NOT NULL\n)\n\nSELECT \n  FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('CREATOR_TZ' AS col_0, username_std_norm AS col_1))) AS creator_sk,\n  username_std_norm AS username_std,\n  COALESCE(snapshot_tz, 'America/New_York') AS timezone_iana,\n  CURRENT_TIMESTAMP() AS loaded_at\nFROM normalized_creators\nQUALIFY ROW_NUMBER() OVER (\n  PARTITION BY username_std_norm\n  ORDER BY snapshot_ts_utc DESC\n) = 1\n",
            "disabled": false,
            "fileName": "definitions/core/dim/dim_creator_timezone.sqlx",
            "bigquery": {
                "labels": {
                    "app": "eros",
                    "domain": "core",
                    "layer": "dim"
                }
            },
            "tags": [
                "core_dim"
            ],
            "actionDescriptor": {
                "description": "Authoritative creator timezone mapping (IANA)",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "core",
                    "layer": "dim"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_source",
                    "name": "creator_statistics_final",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_core_dim",
                "name": "dim_creator_timezone",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "view",
            "target": {
                "schema": "eros_core",
                "name": "vw_week_slots_7d_rbac",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH next_7_days AS (\n  SELECT date_val as plan_date\n  FROM UNNEST(GENERATE_DATE_ARRAY(\n    CURRENT_DATE('America/New_York'),\n    DATE_ADD(CURRENT_DATE('America/New_York'), INTERVAL 6 DAY)\n  )) as date_val\n),\n\nscheduler_creator_mapping AS (\n  SELECT\n    sa.scheduler_code,\n    sa.creator_username as creator_id\n  FROM `of-scheduler-proj.eros_source.scheduler_assignments` sa\n  WHERE sa.scheduler_code IS NOT NULL\n    AND sa.creator_username IS NOT NULL\n),\n\nextended_recommendations AS (\n  SELECT\n    dr.username_std as creator_id,\n    dr.recommendation_date,\n    TIMESTAMP_TRUNC(dr.recommended_send_ts, HOUR) as recommended_time,\n    CASE\n      WHEN dr.price_tier = 'High' THEN 'PPV'\n      WHEN dr.price_tier = 'Medium' THEN 'PPV'\n      ELSE 'PPV'\n    END as action_type,\n    dr.suggested_price as recommended_price_usd,\n    CASE\n      WHEN dr.fatigue_safety_score >= 70 THEN 'LOW'\n      WHEN dr.fatigue_safety_score >= 40 THEN 'MEDIUM'\n      ELSE 'HIGH'\n    END as fatigue_risk_band,\n    CONCAT(\n      CASE\n        WHEN EXTRACT(DAYOFWEEK FROM dr.recommendation_date) IN (1, 7) THEN 'WE_'\n        WHEN EXTRACT(DAYOFWEEK FROM dr.recommendation_date) IN (2, 6) THEN 'HI_'\n        ELSE 'MED_'\n      END,\n      FORMAT('%02d', EXTRACT(HOUR FROM dr.recommended_send_ts)),\n      '_',\n      CASE\n        WHEN dr.fatigue_safety_score >= 70 THEN 'SAFE'\n        WHEN dr.fatigue_safety_score >= 40 THEN 'CAUTION'\n        ELSE 'RISK'\n      END\n    ) as reason_time_code\n  FROM `of-scheduler-proj.eros_messaging_mart.daily_recommendations` dr\n  WHERE dr.recommendation_rank = 1  -- Best recommendation per creator\n),\n\n-- Generate slots for all 7 days for each creator\nall_creator_days AS (\n  SELECT\n    scm.scheduler_code,\n    scm.creator_id,\n    nd.plan_date\n  FROM scheduler_creator_mapping scm\n  CROSS JOIN next_7_days nd\n),\n\nfinal_slots AS (\n  SELECT\n    acd.scheduler_code,\n    acd.creator_id,\n    acd.plan_date,\n    COALESCE(er.recommended_time,\n      TIMESTAMP_ADD(TIMESTAMP(acd.plan_date), INTERVAL (10 + MOD(ABS(FARM_FINGERPRINT(CONCAT(acd.creator_id, acd.plan_date))), 12)) HOUR)\n    ) as recommended_time,\n    COALESCE(er.action_type, 'PPV') as action_type,\n    COALESCE(er.recommended_price_usd, 19.99) as recommended_price_usd,\n    COALESCE(er.fatigue_risk_band, 'MEDIUM') as fatigue_risk_band,\n    COALESCE(er.reason_time_code, 'DEFAULT_TIMING') as reason_time_code\n  FROM all_creator_days acd\n  LEFT JOIN extended_recommendations er\n    ON acd.creator_id = er.creator_id\n    AND acd.plan_date = er.recommendation_date\n)\n\nSELECT\n  scheduler_code,\n  creator_id,\n  plan_date,\n  recommended_time,\n  action_type,\n  recommended_price_usd,\n  fatigue_risk_band,\n  reason_time_code\nFROM final_slots\nORDER BY scheduler_code, creator_id, plan_date",
            "disabled": false,
            "fileName": "definitions/core/vw_week_slots_7d_rbac.sqlx",
            "bigquery": {
                "partitionBy": "",
                "labels": {
                    "app": "eros",
                    "domain": "core",
                    "layer": "view"
                }
            },
            "tags": [
                "core",
                "rbac",
                "scheduling"
            ],
            "actionDescriptor": {
                "description": "7-day weekly slots with scheduler RBAC assignments",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "core",
                    "layer": "view"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_mart",
                    "name": "daily_recommendations",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_source",
                    "name": "scheduler_assignments",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_core",
                "name": "vw_week_slots_7d_rbac",
                "database": "of-scheduler-proj"
            },
            "enumType": "VIEW"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "authenticity_monitor",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH\n-- Analyze recent messaging patterns for each creator\nrecent_messaging_patterns AS (\n  SELECT\n    me.username_std,\n    me.sending_date,\n    CURRENT_DATE() as analysis_date,\n\n    -- TIMING PATTERN ANALYSIS\n    COUNT(DISTINCT me.sending_date) as active_days_7d,\n    COUNT(*) as total_messages_7d,\n\n    -- Time patterns that indicate automation\n    COUNT(DISTINCT EXTRACT(MINUTE FROM me.sending_ts)) as unique_minutes_used,\n    COUNT(DISTINCT EXTRACT(HOUR FROM me.sending_ts)) as unique_hours_used,\n\n    -- Detect exact time repetition (major red flag)\n    COUNT(*) - COUNT(DISTINCT FORMAT_TIMESTAMP('%H:%M', me.sending_ts)) as exact_time_repetitions,\n\n    -- Spacing pattern analysis\n    STDDEV(TIMESTAMP_DIFF(me.sending_ts, LAG(me.sending_ts) OVER (PARTITION BY me.username_std ORDER BY me.sending_ts), MINUTE)) as spacing_variance,\n    AVG(TIMESTAMP_DIFF(me.sending_ts, LAG(me.sending_ts) OVER (PARTITION BY me.username_std ORDER BY me.sending_ts), MINUTE)) as avg_spacing_minutes,\n\n    -- CONTENT PATTERN ANALYSIS\n    COUNT(DISTINCT me.message_text) as unique_messages,\n    COUNT(*) - COUNT(DISTINCT me.message_text) as message_repetitions,\n\n    -- Caption length and structure patterns\n    AVG(LENGTH(me.message_text)) as avg_caption_length,\n    STDDEV(LENGTH(me.message_text)) as caption_length_variance,\n\n    -- Emoji and punctuation patterns (authentic vs scripted)\n    AVG(ARRAY_LENGTH(REGEXP_EXTRACT_ALL(me.message_text, r'[😀-🿿]'))) as avg_emojis_per_message,\n    AVG(ARRAY_LENGTH(REGEXP_EXTRACT_ALL(me.message_text, r'[.!?]'))) as avg_punctuation_per_message,\n\n    -- Language authenticity indicators\n    SUM(CASE WHEN REGEXP_CONTAINS(me.message_text, r'\\b(lol|omg|wtf|tbh|imo|rn|ur|u|gonna|wanna)\\b') THEN 1 ELSE 0 END) as casual_language_count,\n    SUM(CASE WHEN REGEXP_CONTAINS(me.message_text, r'\\b(purchase|acquire|obtain|purchase|transaction)\\b') THEN 1 ELSE 0 END) as formal_language_count,\n\n    -- PRICING PATTERN ANALYSIS\n    COUNT(DISTINCT me.price) as unique_price_points,\n    STDDEV(me.price) as price_variance,\n    SUM(CASE WHEN MOD(me.price, 5) = 0 THEN 1 ELSE 0 END) as round_number_prices,  -- Over-use of round numbers\n\n    -- TIME-ENERGY MATCHING ANALYSIS\n    SUM(CASE\n      WHEN EXTRACT(HOUR FROM me.sending_ts) BETWEEN 6 AND 11\n           AND REGEXP_CONTAINS(LOWER(me.message_text), r'\\b(morning|sleep|woke|wake|bed|tired)\\b') THEN 1\n      ELSE 0\n    END) as morning_energy_matches,\n\n    SUM(CASE\n      WHEN EXTRACT(HOUR FROM me.sending_ts) BETWEEN 20 AND 23\n           AND REGEXP_CONTAINS(LOWER(me.message_text), r'\\b(shower|evening|night|sexy|bed)\\b') THEN 1\n      ELSE 0\n    END) as evening_energy_matches,\n\n    SUM(CASE\n      WHEN EXTRACT(HOUR FROM me.sending_ts) >= 0 AND EXTRACT(HOUR FROM me.sending_ts) < 3\n           AND REGEXP_CONTAINS(LOWER(me.message_text), r'\\b(cant sleep|horny|wet|touching|late)\\b') THEN 1\n      ELSE 0\n    END) as late_night_energy_matches\n\n  FROM `of-scheduler-proj.eros_messaging_feat.messages_enriched` me\n  WHERE me.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n  GROUP BY me.username_std, me.sending_date\n),\n\n-- Calculate daily averages using window functions separately\ndaily_patterns AS (\n  SELECT\n    rmp.*,\n    AVG(total_messages_7d) OVER (PARTITION BY username_std) as avg_daily_messages\n  FROM recent_messaging_patterns rmp\n),\n\n-- Aggregate to user level\nuser_patterns AS (\n  SELECT\n    username_std,\n    analysis_date,\n    AVG(active_days_7d) as active_days_7d,\n    SUM(total_messages_7d) as total_messages_7d,\n    AVG(avg_daily_messages) as avg_daily_messages,\n    AVG(unique_minutes_used) as unique_minutes_used,\n    AVG(unique_hours_used) as unique_hours_used,\n    SUM(exact_time_repetitions) as exact_time_repetitions,\n    AVG(spacing_variance) as spacing_variance,\n    AVG(avg_spacing_minutes) as avg_spacing_minutes,\n    AVG(unique_messages) as unique_messages,\n    SUM(message_repetitions) as message_repetitions,\n    AVG(avg_caption_length) as avg_caption_length,\n    AVG(caption_length_variance) as caption_length_variance,\n    AVG(avg_emojis_per_message) as avg_emojis_per_message,\n    AVG(avg_punctuation_per_message) as avg_punctuation_per_message,\n    SUM(casual_language_count) as casual_language_count,\n    SUM(formal_language_count) as formal_language_count,\n    AVG(unique_price_points) as unique_price_points,\n    AVG(price_variance) as price_variance,\n    SUM(round_number_prices) as round_number_prices,\n    SUM(morning_energy_matches) as morning_energy_matches,\n    SUM(evening_energy_matches) as evening_energy_matches,\n    SUM(late_night_energy_matches) as late_night_energy_matches\n  FROM daily_patterns\n  GROUP BY username_std, analysis_date\n),\n\n-- Calculate authenticity scores and pattern risk\nauthenticity_analysis AS (\n  SELECT\n    up.*,\n\n    -- TIMING AUTHENTICITY SCORE (0-100, higher = more authentic)\n    LEAST(100, GREATEST(0,\n      -- Good variance in timing\n      CASE WHEN up.unique_minutes_used >= 20 THEN 25 ELSE up.unique_minutes_used * 1.25 END +\n\n      -- No exact time repetitions\n      CASE WHEN up.exact_time_repetitions = 0 THEN 20 ELSE GREATEST(0, 20 - up.exact_time_repetitions * 5) END +\n\n      -- Good spacing variance\n      CASE WHEN up.spacing_variance >= 30 THEN 25 ELSE COALESCE(up.spacing_variance * 0.8, 0) END +\n\n      -- Reasonable message frequency\n      CASE WHEN up.avg_daily_messages BETWEEN 8 AND 15 THEN 15\n           WHEN up.avg_daily_messages BETWEEN 6 AND 20 THEN 10\n           ELSE 5 END +\n\n      -- Good hour distribution\n      CASE WHEN up.unique_hours_used >= 8 THEN 15 ELSE up.unique_hours_used * 1.8 END\n    )) as timing_authenticity_score,\n\n    -- CONTENT AUTHENTICITY SCORE (0-100, higher = more authentic)\n    LEAST(100, GREATEST(0,\n      -- High message uniqueness\n      CASE WHEN up.unique_messages >= (up.total_messages_7d * 0.9) THEN 30\n           ELSE up.unique_messages / up.total_messages_7d * 30 END +\n\n      -- Good length variance\n      CASE WHEN up.caption_length_variance >= 20 THEN 20 ELSE COALESCE(up.caption_length_variance, 0) END +\n\n      -- Casual language usage\n      CASE WHEN up.casual_language_count >= (up.total_messages_7d * 0.3) THEN 20\n           ELSE up.casual_language_count / up.total_messages_7d * 66 END +\n\n      -- Low formal language\n      CASE WHEN up.formal_language_count <= (up.total_messages_7d * 0.1) THEN 15\n           ELSE GREATEST(0, 15 - up.formal_language_count * 2) END +\n\n      -- Natural emoji usage\n      CASE WHEN up.avg_emojis_per_message BETWEEN 1 AND 4 THEN 15\n           ELSE GREATEST(0, 15 - ABS(up.avg_emojis_per_message - 2.5) * 3) END\n    )) as content_authenticity_score,\n\n    -- PRICING AUTHENTICITY SCORE (0-100, higher = more authentic)\n    LEAST(100, GREATEST(0,\n      -- Good price variety\n      CASE WHEN up.unique_price_points >= 5 THEN 25 ELSE up.unique_price_points * 5 END +\n\n      -- Good price variance\n      CASE WHEN up.price_variance >= 15 THEN 25 ELSE COALESCE(up.price_variance * 1.6, 0) END +\n\n      -- Not too many round numbers\n      CASE WHEN up.round_number_prices <= (up.total_messages_7d * 0.4) THEN 25\n           ELSE GREATEST(0, 25 - (up.round_number_prices / up.total_messages_7d * 100 - 40) * 2) END +\n\n      -- Reasonable pricing frequency\n      CASE WHEN up.total_messages_7d BETWEEN 30 AND 100 THEN 25 ELSE 15 END\n    )) as pricing_authenticity_score,\n\n    -- TIME-ENERGY AUTHENTICITY SCORE (0-100, higher = more authentic)\n    LEAST(100, GREATEST(0,\n      -- Morning content matches morning times\n      CASE WHEN up.morning_energy_matches >= 2 THEN 35 ELSE up.morning_energy_matches * 17 END +\n\n      -- Evening content matches evening times\n      CASE WHEN up.evening_energy_matches >= 2 THEN 35 ELSE up.evening_energy_matches * 17 END +\n\n      -- Late night content matches late times\n      CASE WHEN up.late_night_energy_matches >= 1 THEN 30 ELSE up.late_night_energy_matches * 30 END\n    )) as time_energy_authenticity_score\n\n  FROM user_patterns up\n),\n\n-- Final risk assessment and recommendations\npattern_risk_assessment AS (\n  SELECT\n    aa.*,\n\n    -- OVERALL AUTHENTICITY SCORE\n    (aa.timing_authenticity_score * 0.3 +\n     aa.content_authenticity_score * 0.35 +\n     aa.pricing_authenticity_score * 0.2 +\n     aa.time_energy_authenticity_score * 0.15) as overall_authenticity_score,\n\n    -- PATTERN RISK LEVEL\n    CASE\n      WHEN aa.exact_time_repetitions >= 5 OR aa.unique_minutes_used <= 5 THEN 'CRITICAL'\n      WHEN aa.spacing_variance <= 10 OR aa.unique_messages <= (aa.total_messages_7d * 0.6) THEN 'HIGH'\n      WHEN aa.round_number_prices >= (aa.total_messages_7d * 0.7) OR aa.casual_language_count = 0 THEN 'MEDIUM'\n      WHEN aa.unique_hours_used <= 4 OR aa.caption_length_variance <= 10 THEN 'LOW'\n      ELSE 'MINIMAL'\n    END as pattern_risk_level,\n\n    -- SPECIFIC ALERTS\n    ARRAY(\n      SELECT alert FROM UNNEST([\n        CASE WHEN aa.exact_time_repetitions > 0 THEN 'EXACT_TIME_REPETITION' END,\n        CASE WHEN aa.unique_minutes_used <= 10 THEN 'LIMITED_TIME_VARIANCE' END,\n        CASE WHEN aa.spacing_variance <= 15 THEN 'ROBOTIC_SPACING' END,\n        CASE WHEN aa.unique_messages <= (aa.total_messages_7d * 0.7) THEN 'HIGH_MESSAGE_REPETITION' END,\n        CASE WHEN aa.casual_language_count = 0 THEN 'NO_CASUAL_LANGUAGE' END,\n        CASE WHEN aa.formal_language_count >= (aa.total_messages_7d * 0.2) THEN 'TOO_FORMAL' END,\n        CASE WHEN aa.round_number_prices >= (aa.total_messages_7d * 0.6) THEN 'EXCESSIVE_ROUND_PRICES' END,\n        CASE WHEN aa.morning_energy_matches = 0 AND aa.evening_energy_matches = 0 THEN 'NO_TIME_ENERGY_MATCHING' END\n      ]) as alert\n      WHERE alert IS NOT NULL\n    ) as authenticity_alerts,\n\n    -- IMPROVEMENT RECOMMENDATIONS\n    CASE aa.pattern_risk_level\n      WHEN 'CRITICAL' THEN 'IMMEDIATE ACTION: Vary send times by 30+ minutes, use unique captions, add casual language'\n      WHEN 'HIGH' THEN 'URGENT: Increase time variance, reduce message repetition, improve content authenticity'\n      WHEN 'MEDIUM' THEN 'IMPORTANT: Add more casual language, vary pricing, improve time-energy matching'\n      WHEN 'LOW' THEN 'MINOR: Expand hour range, increase caption length variety'\n      ELSE 'GOOD: Continue current authentic patterns'\n    END as improvement_recommendations\n\n  FROM authenticity_analysis aa\n)\n\nSELECT\n  username_std,\n  username_std as page_handle,\n  analysis_date,\n\n  -- Authenticity scores\n  overall_authenticity_score,\n  timing_authenticity_score,\n  content_authenticity_score,\n  pricing_authenticity_score,\n  time_energy_authenticity_score,\n\n  -- Risk assessment\n  pattern_risk_level,\n  authenticity_alerts,\n  improvement_recommendations,\n\n  -- Detailed metrics for investigation\n  total_messages_7d,\n  avg_daily_messages,\n  unique_minutes_used,\n  exact_time_repetitions,\n  spacing_variance,\n  unique_messages,\n  message_repetitions,\n  casual_language_count,\n  formal_language_count,\n  round_number_prices,\n  morning_energy_matches,\n  evening_energy_matches,\n  late_night_energy_matches,\n\n  -- Meta\n  CURRENT_TIMESTAMP() as created_at,\n  'authenticity_monitor_v1' as analysis_version\n\nFROM pattern_risk_assessment\nWHERE overall_authenticity_score IS NOT NULL\nORDER BY pattern_risk_level DESC, overall_authenticity_score ASC",
            "disabled": false,
            "fileName": "definitions/messaging/feat/authenticity_monitor.sqlx",
            "bigquery": {
                "partitionBy": "analysis_date",
                "clusterBy": [
                    "username_std",
                    "pattern_risk_level"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "authenticity",
                "anti_pattern"
            ],
            "actionDescriptor": {
                "description": "Authenticity monitoring and anti-pattern detection system to prevent robotic behavior patterns",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_tier_assignments",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "authenticity_monitor",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "caption_bank_drip",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nSELECT * FROM UNNEST([\n  -- MORNING DRIP CAPTIONS (7AM - Sleepy, Just Woke Up Energy)\n  STRUCT(\n    'drip_morning_001' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'just woke up like this lol… u like?? 👀' as caption_text,\n    95 as authenticity_score,  -- High authenticity\n    'casual_sleepy' as tone,\n    ['casual', 'authentic', 'morning', 'sleepy'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_morning_002' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'still in bed half asleep… come keep me company' as caption_text,\n    92 as authenticity_score,\n    'sleepy_invitation' as tone,\n    ['casual', 'authentic', 'morning', 'invitation'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_morning_003' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'ugh mornings are hard but this view might help 😊' as caption_text,\n    88 as authenticity_score,\n    'relatable_morning' as tone,\n    ['casual', 'relatable', 'morning', 'genuine'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- MID-MORNING DRIP CAPTIONS (10AM - Getting Ready Energy)\n  STRUCT(\n    'drip_midmorning_001' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'felt cute… snapped this real quick for u' as caption_text,\n    94 as authenticity_score,\n    'casual_confident' as tone,\n    ['casual', 'confident', 'spontaneous', 'for_you'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_midmorning_002' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'getting dressed but got distracted… oop 👅' as caption_text,\n    91 as authenticity_score,\n    'playful_distracted' as tone,\n    ['playful', 'authentic', 'getting_ready', 'distracted'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- AFTERNOON DRIP CAPTIONS (2PM - Bored at Home Energy)\n  STRUCT(\n    'drip_afternoon_001' as caption_id,\n    'drip_afternoon' as drip_type,\n    'afternoon' as time_energy,\n    'bored at home rn… someone entertain me' as caption_text,\n    96 as authenticity_score,\n    'bored_invitation' as tone,\n    ['bored', 'authentic', 'invitation', 'home'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_afternoon_002' as caption_id,\n    'drip_afternoon' as drip_type,\n    'afternoon' as time_energy,\n    'wasn\\'t gonna post this but whatever lol' as caption_text,\n    93 as authenticity_score,\n    'spontaneous_casual' as tone,\n    ['spontaneous', 'casual', 'authentic', 'whatever'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- EVENING DRIP CAPTIONS (8PM - Getting Ready to Go Out)\n  STRUCT(\n    'drip_evening_001' as caption_id,\n    'drip_evening' as drip_type,\n    'evening' as time_energy,\n    'bout to hop in the shower… wanna come?' as caption_text,\n    89 as authenticity_score,\n    'seductive_invitation' as tone,\n    ['seductive', 'invitation', 'shower', 'evening'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_evening_002' as caption_id,\n    'drip_evening' as drip_type,\n    'evening' as time_energy,\n    'no plans tonight sooo… dm me 😏' as caption_text,\n    92 as authenticity_score,\n    'available_flirty' as tone,\n    ['available', 'flirty', 'evening', 'dm_invitation'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- LATE NIGHT DRIP CAPTIONS (11PM - Can't Sleep Energy)\n  STRUCT(\n    'drip_late_001' as caption_id,\n    'drip_late' as drip_type,\n    'late_night' as time_energy,\n    'cant sleep… so i took this lmao' as caption_text,\n    97 as authenticity_score,\n    'sleepless_authentic' as tone,\n    ['sleepless', 'authentic', 'late_night', 'spontaneous'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_late_002' as caption_id,\n    'drip_late' as drip_type,\n    'late_night' as time_energy,\n    'lowkey so wet rn an feeling myself 😌' as caption_text,\n    85 as authenticity_score,\n    'horny_confident' as tone,\n    ['horny', 'confident', 'late_night', 'feeling_myself'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- VERY LATE NIGHT DRIP CAPTIONS (2AM - Explicit Late Night Energy)\n  STRUCT(\n    'drip_verylate_001' as caption_id,\n    'drip_late' as drip_type,\n    'very_late_night' as time_energy,\n    'literally cant stop touching myself rn… come join meee plsss' as caption_text,\n    82 as authenticity_score,\n    'explicit_needy' as tone,\n    ['explicit', 'needy', 'very_late', 'touching_myself'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_verylate_002' as caption_id,\n    'drip_late' as drip_type,\n    'very_late_night' as time_energy,\n    'fuck it… come distract me before i do something bad 😈' as caption_text,\n    84 as authenticity_score,\n    'naughty_invitation' as tone,\n    ['naughty', 'invitation', 'very_late', 'bad_girl'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- Additional variations for each time slot (Morning alternatives)\n  STRUCT(\n    'drip_morning_004' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'messy hair dont care… morning selfie for my favs 💕' as caption_text,\n    90 as authenticity_score,\n    'messy_authentic' as tone,\n    ['messy', 'authentic', 'morning', 'favs'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_morning_005' as caption_id,\n    'drip_morning' as drip_type,\n    'morning' as time_energy,\n    'good morning babes 🌞 hope this brightens ur day' as caption_text,\n    86 as authenticity_score,\n    'sweet_morning' as tone,\n    ['sweet', 'caring', 'morning', 'brighten_day'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- Additional afternoon variations\n  STRUCT(\n    'drip_afternoon_003' as caption_id,\n    'drip_afternoon' as drip_type,\n    'afternoon' as time_energy,\n    'lazy sunday vibes… what are you up to today?' as caption_text,\n    88 as authenticity_score,\n    'lazy_conversational' as tone,\n    ['lazy', 'conversational', 'sunday', 'what_doing'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'drip_afternoon_004' as caption_id,\n    'drip_afternoon' as drip_type,\n    'afternoon' as time_energy,\n    'procrastinating again lol… anyone else avoiding adulting?' as caption_text,\n    92 as authenticity_score,\n    'relatable_procrastinating' as tone,\n    ['relatable', 'procrastinating', 'adulting', 'anyone_else'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  )\n\n]) AS drip_captions",
            "disabled": false,
            "fileName": "definitions/messaging/feat/caption_bank_drip.sqlx",
            "bigquery": {
                "partitionBy": "created_date",
                "clusterBy": [
                    "drip_type",
                    "time_energy",
                    "authenticity_score"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "caption_bank",
                "drip_bumps"
            ],
            "actionDescriptor": {
                "description": "Specialized caption bank for drip bump messages with time-of-day energy matching and authenticity scoring",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "caption_bank_drip",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "caption_bank_renewal",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nSELECT * FROM UNNEST([\n  -- MORNING RENEWAL CAMPAIGNS (8AM - Fresh Start Energy)\n  STRUCT(\n    'renewal_morning_001' as caption_id,\n    'renewal_morning' as renewal_type,\n    'high' as urgency_level,\n    'exclusive_freebie' as incentive_type,\n    'LAST CHANCE 😩 make sure to have ur RENEW ON to get ur FREE surprise today daddy!!! sending it out in 3 hours😈 [link]' as caption_text,\n    88 as authenticity_score,\n    'urgent_deadline' as tone,\n    ['last_chance', 'free_surprise', 'daddy', 'deadline'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_morning_002' as caption_id,\n    'renewal_morning' as renewal_type,\n    'medium' as urgency_level,\n    'appreciation_gift' as incentive_type,\n    'thank you for keeping your Re-bill ON ❤️ to show u my appreciation...here\\'s a little freebie of me being naughty 😋' as caption_text,\n    91 as authenticity_score,\n    'grateful_appreciation' as tone,\n    ['thank_you', 'appreciation', 'freebie', 'naughty'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_morning_003' as caption_id,\n    'renewal_morning' as renewal_type,\n    'high' as urgency_level,\n    'exclusive_content' as incentive_type,\n    'REBILL REWARD 🎁 everyone with renew ON gets something special in their DMs today… make sure yours is on!' as caption_text,\n    86 as authenticity_score,\n    'reward_exclusive' as tone,\n    ['rebill_reward', 'special', 'dms', 'make_sure'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- AFTERNOON RENEWAL CAMPAIGNS (4PM - Mid-Day Reminder)\n  STRUCT(\n    'renewal_afternoon_001' as caption_id,\n    'renewal_afternoon' as renewal_type,\n    'high' as urgency_level,\n    'explicit_content' as incentive_type,\n    '💦 sending this video to everyone who has RENEW ON 💦 make sure u have it by Sunday night if u want to see me be a CUM DUMPSTER 😝' as caption_text,\n    82 as authenticity_score,\n    'explicit_deadline' as tone,\n    ['video', 'renew_on', 'sunday_deadline', 'cum_dumpster'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_afternoon_002' as caption_id,\n    'renewal_afternoon' as renewal_type,\n    'medium' as urgency_level,\n    'loyalty_reward' as incentive_type,\n    'my loyal fans deserve the best 💕 if your rebill is ON check your messages for a surprise…' as caption_text,\n    89 as authenticity_score,\n    'loyal_deserving' as tone,\n    ['loyal_fans', 'deserve_best', 'check_messages', 'surprise'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_afternoon_003' as caption_id,\n    'renewal_afternoon' as renewal_type,\n    'high' as urgency_level,\n    'time_limited' as incentive_type,\n    'ATTENTION: rebill rewards going out in 2 hours! ⏰ dont miss out… turn that auto-renew ON now!' as caption_text,\n    85 as authenticity_score,\n    'attention_deadline' as tone,\n    ['attention', '2_hours', 'dont_miss_out', 'auto_renew'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- MIDNIGHT RENEWAL CAMPAIGNS (12AM - Final Call Energy)\n  STRUCT(\n    'renewal_midnight_001' as caption_id,\n    'renewal_midnight' as renewal_type,\n    'extreme' as urgency_level,\n    'final_chance' as incentive_type,\n    'FINAL CALL 🚨 rebill rewards end in 1 hour!!! if u dont have auto-renew ON you\\'ll miss the hottest content i\\'ve ever made 🔥' as caption_text,\n    80 as authenticity_score,\n    'final_urgent' as tone,\n    ['final_call', '1_hour', 'hottest_content', 'ever_made'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_midnight_002' as caption_id,\n    'renewal_midnight' as renewal_type,\n    'high' as urgency_level,\n    'exclusive_access' as incentive_type,\n    'midnight drop incoming 👀 only for my auto-renew angels… are you one of them?' as caption_text,\n    87 as authenticity_score,\n    'midnight_exclusive' as tone,\n    ['midnight_drop', 'auto_renew_angels', 'are_you_one'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_midnight_003' as caption_id,\n    'renewal_midnight' as renewal_type,\n    'medium' as urgency_level,\n    'late_night_special' as incentive_type,\n    'can\\'t sleep so i\\'m sending my rebill babies something special 💤✨ hope you\\'re one of them' as caption_text,\n    90 as authenticity_score,\n    'sleepless_special' as tone,\n    ['cant_sleep', 'rebill_babies', 'something_special', 'hope_youre_one'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- Additional High-Performing Variations\n  STRUCT(\n    'renewal_general_001' as caption_id,\n    'renewal_general' as renewal_type,\n    'high' as urgency_level,\n    'vip_treatment' as incentive_type,\n    'VIP TREATMENT for my auto-renew subscribers 👑 something extra special waiting for you…' as caption_text,\n    83 as authenticity_score,\n    'vip_exclusive' as tone,\n    ['vip_treatment', 'auto_renew_subscribers', 'extra_special', 'waiting'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_general_002' as caption_id,\n    'renewal_general' as renewal_type,\n    'medium' as urgency_level,\n    'appreciation_love' as incentive_type,\n    'showing love to everyone who keeps their rebill ON 💗 you guys are the reason i can keep creating…' as caption_text,\n    92 as authenticity_score,\n    'appreciation_genuine' as tone,\n    ['showing_love', 'keeps_rebill_on', 'you_guys', 'keep_creating'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_general_003' as caption_id,\n    'renewal_general' as renewal_type,\n    'high' as urgency_level,\n    'bundle_reward' as incentive_type,\n    'REBILL BUNDLE ALERT 📦 everyone with auto-renew gets 3 exclusive videos + custom photo set… limited time!' as caption_text,\n    81 as authenticity_score,\n    'bundle_exclusive' as tone,\n    ['bundle_alert', '3_videos', 'custom_photo_set', 'limited_time'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- Softer Approach Variations\n  STRUCT(\n    'renewal_soft_001' as caption_id,\n    'renewal_soft' as renewal_type,\n    'low' as urgency_level,\n    'gentle_reminder' as incentive_type,\n    'just a gentle reminder that rebill subscribers get the best content first 🥰 no pressure though!' as caption_text,\n    94 as authenticity_score,\n    'gentle_no_pressure' as tone,\n    ['gentle_reminder', 'best_content_first', 'no_pressure'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'renewal_soft_002' as caption_id,\n    'renewal_soft' as renewal_type,\n    'low' as urgency_level,\n    'value_proposition' as incentive_type,\n    'auto-renew = never miss exclusive drops + first access to everything new ✨ just saying 😉' as caption_text,\n    88 as authenticity_score,\n    'value_casual' as tone,\n    ['never_miss', 'first_access', 'everything_new', 'just_saying'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  )\n\n]) AS renewal_captions",
            "disabled": false,
            "fileName": "definitions/messaging/feat/caption_bank_renewal.sqlx",
            "bigquery": {
                "partitionBy": "created_date",
                "clusterBy": [
                    "renewal_type",
                    "urgency_level",
                    "incentive_type"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "caption_bank",
                "renewals"
            ],
            "actionDescriptor": {
                "description": "Specialized caption bank for renewal campaigns with FOMO and exclusive value propositions",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "caption_bank_renewal",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "caption_bank_tip",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nSELECT * FROM UNNEST([\n  -- EFFORT VS TIP CAMPAIGNS (Give choice between engagement and payment)\n  STRUCT(\n    'tip_effort_001' as caption_id,\n    'effort_vs_tip' as tip_type,\n    'medium' as effort_level,\n    'video_reward' as reward_type,\n    'Like 100 posts for a FREE solo oil video 🎉 If you are to lazy to do the home work, you can cheat & tip $5 for the video 😜' as caption_text,\n    89 as authenticity_score,\n    'playful_choice' as tone,\n    ['like_100_posts', 'free_video', 'lazy_cheat', 'tip_5'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_effort_002' as caption_id,\n    'effort_vs_tip' as tip_type,\n    'high' as effort_level,\n    'photo_set' as reward_type,\n    'Comment on 50 posts saying \"goddess\" for exclusive photo set 📸 OR tip $8 to skip the work and get it instantly 💸' as caption_text,\n    86 as authenticity_score,\n    'effort_or_pay' as tone,\n    ['comment_50_posts', 'goddess', 'photo_set', 'tip_8_skip'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_effort_003' as caption_id,\n    'effort_vs_tip' as tip_type,\n    'low' as effort_level,\n    'custom_content' as reward_type,\n    'Double tap 25 posts & you get a custom pic 💕 too tired? tip $3 and I\\'ll send it anyway 😘' as caption_text,\n    92 as authenticity_score,\n    'easy_choice' as tone,\n    ['double_tap_25', 'custom_pic', 'too_tired', 'tip_3'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- SCARCITY-BASED TIP CAMPAIGNS\n  STRUCT(\n    'tip_scarcity_001' as caption_id,\n    'scarcity' as tip_type,\n    'instant' as effort_level,\n    'special_gift' as reward_type,\n    'First 10 people to send me a tip get a special gift 😘😛💦' as caption_text,\n    84 as authenticity_score,\n    'limited_opportunity' as tone,\n    ['first_10_people', 'send_tip', 'special_gift'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_scarcity_002' as caption_id,\n    'scarcity' as tip_type,\n    'instant' as effort_level,\n    'custom_video' as reward_type,\n    'Only making 5 custom videos today 🎬 first tips get priority… who wants one?' as caption_text,\n    87 as authenticity_score,\n    'limited_slots' as tone,\n    ['only_5_videos', 'first_tips_priority', 'who_wants'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_scarcity_003' as caption_id,\n    'scarcity' as tip_type,\n    'instant' as effort_level,\n    'mystery_reward' as reward_type,\n    'FLASH SALE: first 15 tips of ANY amount get mystery reward 🎁✨ no spoilers… trust me though 😈' as caption_text,\n    82 as authenticity_score,\n    'flash_mystery' as tone,\n    ['flash_sale', 'first_15_tips', 'any_amount', 'mystery_reward', 'trust_me'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- SIMPLE TIP CAMPAIGNS (For newer accounts)\n  STRUCT(\n    'tip_simple_001' as caption_id,\n    'simple' as tip_type,\n    'instant' as effort_level,\n    'surprise' as reward_type,\n    'Tip for a surprise 🤤' as caption_text,\n    95 as authenticity_score,\n    'simple_effective' as tone,\n    ['tip_for_surprise'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_simple_002' as caption_id,\n    'simple' as tip_type,\n    'instant' as effort_level,\n    'thank_you_gift' as reward_type,\n    'Send me anything and get thanked properly 💋' as caption_text,\n    91 as authenticity_score,\n    'grateful_simple' as tone,\n    ['send_anything', 'thanked_properly'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_simple_003' as caption_id,\n    'simple' as tip_type,\n    'instant' as effort_level,\n    'good_vibes' as reward_type,\n    'Feeling generous? I\\'ll make your day better 🌟' as caption_text,\n    88 as authenticity_score,\n    'generous_positive' as tone,\n    ['feeling_generous', 'make_day_better'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- INTERACTIVE TIP CAMPAIGNS\n  STRUCT(\n    'tip_interactive_001' as caption_id,\n    'interactive' as tip_type,\n    'medium' as effort_level,\n    'personalized_content' as reward_type,\n    'Tip with your fantasy and I\\'ll rate it 1-10 💭 plus send something related if it\\'s above 7 😏' as caption_text,\n    85 as authenticity_score,\n    'interactive_rating' as tone,\n    ['tip_with_fantasy', 'rate_1_to_10', 'above_7'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_interactive_002' as caption_id,\n    'interactive' as tip_type,\n    'low' as effort_level,\n    'emoji_game' as reward_type,\n    'Tip me with 3 emojis and I\\'ll guess your mood… if I\\'m right you get a bonus 🎯' as caption_text,\n    90 as authenticity_score,\n    'emoji_guessing' as tone,\n    ['tip_3_emojis', 'guess_mood', 'if_right_bonus'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- APPRECIATION TIP CAMPAIGNS\n  STRUCT(\n    'tip_appreciation_001' as caption_id,\n    'appreciation' as tip_type,\n    'instant' as effort_level,\n    'extra_content' as reward_type,\n    'Having a rough day… tips always cheer me up and I send extra love back 💕' as caption_text,\n    93 as authenticity_score,\n    'vulnerable_appreciation' as tone,\n    ['rough_day', 'cheer_me_up', 'extra_love_back'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_appreciation_002' as caption_id,\n    'appreciation' as tip_type,\n    'instant' as effort_level,\n    'gratitude_content' as reward_type,\n    'You guys supporting my content means everything 🥺 tips help me create more… and I always show appreciation 💖' as caption_text,\n    91 as authenticity_score,\n    'grateful_meaningful' as tone,\n    ['supporting_content', 'means_everything', 'help_create_more', 'show_appreciation'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  -- WEEKEND/SPECIAL OCCASION CAMPAIGNS\n  STRUCT(\n    'tip_weekend_001' as caption_id,\n    'weekend_special' as tip_type,\n    'instant' as effort_level,\n    'weekend_treat' as reward_type,\n    'WEEKEND VIBES 🎉 tip me for your weekend treat… I\\'ve got some special content ready 😘' as caption_text,\n    86 as authenticity_score,\n    'weekend_celebration' as tone,\n    ['weekend_vibes', 'weekend_treat', 'special_content_ready'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  ),\n\n  STRUCT(\n    'tip_special_001' as caption_id,\n    'special_occasion' as tip_type,\n    'instant' as effort_level,\n    'celebration_content' as reward_type,\n    'Celebrating a good week 🥳 tip to join the party… everyone gets something fun!' as caption_text,\n    84 as authenticity_score,\n    'celebration_inclusive' as tone,\n    ['celebrating_good_week', 'join_party', 'everyone_gets_fun'] as tags,\n    0 as times_used,\n    CAST(NULL AS DATE) as last_used_date,\n    CURRENT_DATE() as created_date\n  )\n\n]) AS tip_captions",
            "disabled": false,
            "fileName": "definitions/messaging/feat/caption_bank_tip.sqlx",
            "bigquery": {
                "partitionBy": "created_date",
                "clusterBy": [
                    "tip_type",
                    "effort_level",
                    "reward_type"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "caption_bank",
                "tips"
            ],
            "actionDescriptor": {
                "description": "Specialized caption bank for tip campaigns with choice-based engagement and scarcity tactics",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "caption_bank_tip",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "caption_theme_signals",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH caption_source AS (\n  SELECT\n    caption_sk,\n    caption_type,\n    caption_text,\n    LOWER(REGEXP_REPLACE(caption_text, r'[^a-z0-9\\s]', ' ')) AS caption_text_clean,\n    CURRENT_DATE() AS tagged_date,\n    CURRENT_TIMESTAMP() AS tagged_at\n  FROM `of-scheduler-proj.eros_messaging_stg.captions`\n  WHERE loaded_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n),\n\ntheme_config AS (\n  SELECT theme_label, priority, keyword\n  FROM UNNEST([\n    STRUCT('Soft Tease / Lingerie' AS theme_label, 10 AS priority, [\n      'lingerie','lace','stocking','stockings','garter','sheer','outfit','photo set','photoset','strip','striptease','strip tease','try on','dress up','boudoir'\n    ] AS keywords),\n    STRUCT('Slow Sensual / GFE' AS theme_label, 20 AS priority, [\n      'miss you','cuddle','romantic','love letter','slow burn','sensual','date night','girlfriend experience','gfe','soft kiss','spoil you','thinking of you'\n    ]),\n    STRUCT('JOI / Instruction' AS theme_label, 30 AS priority, [\n      'joi','instruction','edge','edging','stroke for me','jerk for me','countdown','dont cum','don t cum','look at me','hands free','finish with me','good boy'\n    ]),\n    STRUCT('Feet & Leg Focus' AS theme_label, 40 AS priority, [\n      'feet','foot','toes','soles','arches','heel','heels','foot job','footjob','stocking tease'\n    ]),\n    STRUCT('Booty Focus / Twerk' AS theme_label, 50 AS priority, [\n      'booty','twerk','peach','shake it','backshot','big butt','behind','ass jiggle'\n    ]),\n    STRUCT('Bust / Chest Focus' AS theme_label, 60 AS priority, [\n      'tits','boobs','topless','bare chest','cleavage','breast','nipple','nipples','titty','bust','rack'\n    ]),\n    STRUCT('Wet & Dripping' AS theme_label, 70 AS priority, [\n      'dripping','soaked','wet','juicy','drip','splash','flood','drenched'\n    ]),\n    STRUCT('Shower / Bath' AS theme_label, 80 AS priority, [\n      'shower','bathtub','bath','bubble bath','bathroom','steam','sauna','hot tub','jacuzzi'\n    ]),\n    STRUCT('Oil & Massage' AS theme_label, 90 AS priority, [\n      'oil','oiled','massage','lotion','glow','slick','greased'\n    ]),\n    STRUCT('Outdoor / Public Vibe' AS theme_label, 100 AS priority, [\n      'outdoor','outside','balcony','beach','garden','forest','public','sun kissed','poolside','hotel balcony','park','patio','sunshine','nature','vacation'\n    ]),\n    STRUCT('Solo Touch' AS theme_label, 110 AS priority, [\n      'touch myself','finger','fingering','solo play','self care','self play','self love','clit rub','clitoral','caress'\n    ]),\n    STRUCT('Toy Play (Hands)' AS theme_label, 120 AS priority, [\n      'toy','dildo','vibrator','wand','plug','rabbit','bullet','toy play','toy show','toy session','toy time'\n    ]),\n    STRUCT('Toy Play (Oral POV)' AS theme_label, 130 AS priority, [\n      'blow toy','suck toy','oral toy','deepthroat toy','mouth on toy','lick toy','pov bj toy','pov blowjob toy'\n    ]),\n    STRUCT('Toy Play (Anal)' AS theme_label, 140 AS priority, [\n      'anal toy','butt plug','backdoor play','anal play','booty play'\n    ]),\n    STRUCT('Machine / Advanced Toys' AS theme_label, 150 AS priority, [\n      'machine','auto toy','piston','automatic toy','stroker','saddle'\n    ]),\n    STRUCT('B/G Action' AS theme_label, 160 AS priority, [\n      'boyfriend','with my man','with him','with my guy','with my partner','with bae','couple content','sex tape','full tape','we had sex','we made love','he filmed me','with my love'\n    ]),\n    STRUCT('Oral on Partner' AS theme_label, 170 AS priority, [\n      'blowjob','bj','oral on him','sloppy bj','deepthroat','throat','face sitting','face sit','lick him','suck him','mouth on him'\n    ]),\n    STRUCT('G/G Action' AS theme_label, 180 AS priority, [\n      'girl on girl','g g','with my girl','with my bestie','with her','she and i','lesbian','gg content','bestie and i'\n    ]),\n    STRUCT('Group / Threesome' AS theme_label, 190 AS priority, [\n      'threesome','3some','triple','group fun','mmf','ffm','two girls one guy','two guys','foursome','swinger','double bj','both of us','two babes'\n    ]),\n    STRUCT('Creampie / Breeding Fantasy' AS theme_label, 200 AS priority, [\n      'creampie','breed','breeding','fill me up','breed me','impregnate','cream dump','finish inside','breed fantasy'\n    ]),\n    STRUCT('Anal with Partner' AS theme_label, 210 AS priority, [\n      'anal with him','he took me anal','backdoor with him','partner anal','anal scene','gave it up back there'\n    ]),\n    STRUCT('Voyeur / Exhibition' AS theme_label, 220 AS priority, [\n      'neighbors watching','people watching','didnt close the curtains','didn t close the curtains','public fun','voyeur','caught on camera','hotel balcony','parking lot','out in public','camera on us'\n    ]),\n    STRUCT('Power Exchange' AS theme_label, 230 AS priority, [\n      'power exchange','dominant','domme','submissive','obedient','command you','discipline','good boy','good girl','brat','tamer','collar','leash','obedience','control'\n    ]),\n    STRUCT('Spoil / Tribute' AS theme_label, 240 AS priority, [\n      'tip','tribute','spoil','cashapp','send a tip','buy me','treat me','first fan','winner tip'\n    ]),\n    STRUCT('Roleplay' AS theme_label, 250 AS priority, [\n      'roleplay','role play','teacher','student','nurse','maid','cosplay','costume','character','princess','gamer girl','schoolgirl','secretary','office play','dress up as','storyline'\n    ]),\n    STRUCT('Daddy / Princess Tone' AS theme_label, 260 AS priority, [\n      'daddy','good girl','princess','baby girl','babygirl','kitten','call me princess'\n    ]),\n    STRUCT('Holiday / Seasonal' AS theme_label, 270 AS priority, [\n      'christmas','halloween','valentine','easter','holiday','xmas','new year','thanksgiving','holiday special','black friday'\n    ]),\n    STRUCT('Travel / Luxury' AS theme_label, 280 AS priority, [\n      'hotel','suite','yacht','cruise','vacation','resort','spa','luxury','penthouse','jet','travel'\n    ]),\n    STRUCT('Gym / Fitness' AS theme_label, 290 AS priority, [\n      'gym','workout','yoga','squats','fitness','stretching','athletic','sweaty'\n    ]),\n    STRUCT('Food & Sensory' AS theme_label, 300 AS priority, [\n      'whipped cream','chocolate','ice cream','candy','honey','wine','cocktail','drink with me','snacks','food play','cake','kitchen fun','taste test','cocktail night'\n    ]),\n    STRUCT('Bundle / Mega Pack' AS theme_label, 310 AS priority, [\n      'bundle','mega pack','pack','collection','vault','library','folder','drop','batch','mix of','set of','20 videos','full series'\n    ]),\n    STRUCT('Conversation Starter' AS theme_label, 320 AS priority, [\n      'what are you up to','good morning','gm baby','question for you','what do you want to see','hey babe','still awake','you up','checking in'\n    ]),\n    STRUCT('Urgent / Last Chance' AS theme_label, 330 AS priority, [\n      'last chance','unlock before','expiring soon','ends tonight','only today','unsend','countdown','hurry','timer'\n    ]),\n    STRUCT('VIP / Loyalty' AS theme_label, 340 AS priority, [\n      'vip','loyal','renew','rebill','top fan','special list','exclusive for renew','renew on'\n    ]),\n    STRUCT('Freebie' AS theme_label, 350 AS priority, [\n      'free','no charge','on me','gift for you','free video','freebie','complimentary','my treat'\n    ])\n  ]) AS theme,\n  UNNEST(theme.keywords) AS keyword\n),\n\nexplicit_config AS (\n  SELECT level_label, level_score, keyword\n  FROM UNNEST([\n    STRUCT('Suggestive' AS level_label, 1 AS level_score, [\n      'wink','tease','flirt','smile','chat','talk','conversation','hangout','miss you','thinking of you','sweet','cuddle','kiss'\n    ] AS keywords),\n    STRUCT('Playful' AS level_label, 2 AS level_score, [\n      'strip','topless','booty','peek','peekaboo','cleavage','bikini','lingerie','teasing'\n    ]),\n    STRUCT('Semi-Explicit' AS level_label, 3 AS level_score, [\n      'nude','naked','boobs','tits','ass','booty','wet','dripping','touch','finger','toy','vibrator','squirt','oil'\n    ]),\n    STRUCT('Explicit' AS level_label, 4 AS level_score, [\n      'sex','ride','doggy','cowgirl','missionary','blowjob','bj','oral','deepthroat','threesome','group','pov','finish','pounding'\n    ]),\n    STRUCT('Hardcore' AS level_label, 5 AS level_score, [\n      'creampie','breed','impregnate','dp','double penetration','gangbang','hard pounding','facefuck','gape'\n    ])\n  ]) AS lvl,\n  UNNEST(lvl.keywords) AS keyword\n),\n\nflag_keywords AS (\n  SELECT keyword\n  FROM UNNEST([\n    'choke','asphyx','slave','blood','knife','gun','kid','minor','teen','underage','forced','non consensual','chloroform','drugged','abduct','kidnap','violence','injure','hurt','painful','incest','taboo family'\n  ]) AS keyword\n),\n\ntheme_matches AS (\n  SELECT\n    c.caption_sk,\n    c.caption_type,\n    theme.theme_label,\n    theme.priority,\n    theme.keyword\n  FROM caption_source c\n  JOIN theme_config theme\n    ON STRPOS(c.caption_text_clean, theme.keyword) > 0\n),\n\ntheme_agg AS (\n  SELECT\n    caption_sk,\n    caption_type,\n    theme_label,\n    priority,\n    ARRAY_AGG(DISTINCT keyword ORDER BY keyword) AS matched_keywords,\n    ARRAY_LENGTH(ARRAY_AGG(DISTINCT keyword)) AS match_count\n  FROM theme_matches\n  GROUP BY caption_sk, caption_type, theme_label, priority\n),\n\ntheme_ranked AS (\n  SELECT\n    t.*,\n    ROW_NUMBER() OVER (PARTITION BY caption_sk ORDER BY priority, match_count DESC, theme_label) AS theme_rank\n  FROM theme_agg t\n),\n\nexplicit_matches AS (\n  SELECT\n    c.caption_sk,\n    c.caption_type,\n    lvl.level_label,\n    lvl.level_score,\n    lvl.keyword\n  FROM caption_source c\n  JOIN explicit_config lvl\n    ON STRPOS(c.caption_text_clean, lvl.keyword) > 0\n),\n\nexplicit_agg AS (\n  SELECT\n    caption_sk,\n    caption_type,\n    level_label,\n    level_score,\n    ARRAY_AGG(DISTINCT keyword ORDER BY keyword) AS matched_keywords,\n    ARRAY_LENGTH(ARRAY_AGG(DISTINCT keyword)) AS match_count\n  FROM explicit_matches\n  GROUP BY caption_sk, caption_type, level_label, level_score\n),\n\nexplicit_ranked AS (\n  SELECT\n    e.*,\n    ROW_NUMBER() OVER (PARTITION BY caption_sk ORDER BY level_score DESC, match_count DESC, level_label) AS level_rank\n  FROM explicit_agg e\n),\n\nflagged_captions AS (\n  SELECT DISTINCT\n    c.caption_sk\n  FROM caption_source c\n  JOIN flag_keywords fk\n    ON STRPOS(c.caption_text_clean, fk.keyword) > 0\n),\n\nprimary_themes AS (\n  SELECT caption_sk, theme_label AS primary_theme\n  FROM theme_ranked\n  WHERE theme_rank = 1\n),\n\nsecondary_themes_agg AS (\n  SELECT\n    caption_sk,\n    ARRAY_AGG(theme_label ORDER BY theme_rank) AS secondary_themes\n  FROM theme_ranked\n  WHERE theme_rank > 1\n  GROUP BY caption_sk\n),\n\ntheme_keywords_agg AS (\n  SELECT\n    caption_sk,\n    ARRAY_AGG(DISTINCT keyword ORDER BY keyword) AS theme_keywords\n  FROM theme_matches\n  GROUP BY caption_sk\n),\n\nprimary_explicit AS (\n  SELECT caption_sk, level_label AS explicitness_level, level_score AS explicitness_score\n  FROM explicit_ranked\n  WHERE level_rank = 1\n),\n\nexplicit_keywords_agg AS (\n  SELECT\n    caption_sk,\n    ARRAY_AGG(DISTINCT keyword ORDER BY keyword) AS explicitness_keywords\n  FROM explicit_matches\n  GROUP BY caption_sk\n),\n\nfinal AS (\n  SELECT\n    c.caption_sk,\n    c.caption_type,\n    c.caption_text,\n    c.tagged_date,\n    c.tagged_at,\n    COALESCE(pt.primary_theme, 'General') AS primary_theme,\n    COALESCE(sta.secondary_themes, []) AS secondary_themes,\n    COALESCE(tka.theme_keywords, []) AS theme_keywords,\n    COALESCE(\n      pe.explicitness_level,\n      CASE WHEN c.caption_type = 'BUMP' THEN 'Suggestive' ELSE 'Semi-Explicit' END\n    ) AS explicitness_level,\n    COALESCE(\n      pe.explicitness_score,\n      CASE WHEN c.caption_type = 'BUMP' THEN 1 ELSE 3 END\n    ) AS explicitness_score,\n    COALESCE(eka.explicitness_keywords, []) AS explicitness_keywords,\n    IFNULL(fc.caption_sk IS NOT NULL, FALSE) AS needs_compliance_review\n  FROM caption_source c\n  LEFT JOIN primary_themes pt ON c.caption_sk = pt.caption_sk\n  LEFT JOIN secondary_themes_agg sta ON c.caption_sk = sta.caption_sk\n  LEFT JOIN theme_keywords_agg tka ON c.caption_sk = tka.caption_sk\n  LEFT JOIN primary_explicit pe ON c.caption_sk = pe.caption_sk\n  LEFT JOIN explicit_keywords_agg eka ON c.caption_sk = eka.caption_sk\n  LEFT JOIN flagged_captions fc ON c.caption_sk = fc.caption_sk\n)\n\nSELECT *\nFROM final\n",
            "disabled": false,
            "fileName": "definitions/messaging/feat/caption_theme_signals.sqlx",
            "bigquery": {
                "partitionBy": "tagged_date",
                "clusterBy": [
                    "caption_type"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_feat",
                "caption_tagging"
            ],
            "actionDescriptor": {
                "description": "Automated content themes, explicitness levels, and compliance flags for caption catalog",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "captions",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "caption_theme_signals",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "creator_heatmap",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nSELECT \n  username_std,\n  local_day_of_week,\n  local_hour,\n  \n  -- Performance signals\n  AVG(rpm) as avg_rpm,\n  AVG(purchase_rate) as avg_purchase_rate,\n  AVG(view_rate) as avg_view_rate,\n  COUNT(*) as message_count,\n  SUM(sent_count) as total_sent,\n  SUM(earnings_total) as total_earnings,\n  \n  -- Confidence scoring\n  CASE \n    WHEN COUNT(*) >= 10 THEN 'HIGH'\n    WHEN COUNT(*) >= 5 THEN 'MEDIUM' \n    ELSE 'LOW'\n  END as confidence_level,\n  \n  -- Timing intelligence ranking\n  ROW_NUMBER() OVER (\n    PARTITION BY username_std \n    ORDER BY AVG(rpm) DESC\n  ) as rpm_rank_for_creator\n\nFROM `of-scheduler-proj.eros_messaging_feat.messages_enriched`\nWHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n  AND rpm IS NOT NULL\nGROUP BY username_std, local_day_of_week, local_hour\nHAVING COUNT(*) >= 3  -- Minimum statistical significance",
            "disabled": false,
            "fileName": "definitions/messaging/feat/creator_heatmap.sqlx",
            "bigquery": {
                "clusterBy": [
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat"
            ],
            "actionDescriptor": {
                "description": "Creator performance heatmap by hour/day for timing optimization",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "creator_heatmap",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "creator_page_assignments",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH page_type_detection AS (\n  SELECT\n    username_std,\n    subscription_net as subscription_price,\n    following_count as total_followers,\n    total_earnings_net as avg_weekly_revenue,\n    renew_on_percent as rebill_pct,\n    message_net as ppv_sends_7d,\n    active_fans as ppv_buys_7d,\n    CURRENT_DATE() as assignment_date,\n\n    -- Page type detection based on subscription price\n    CASE\n      WHEN subscription_net > 0 THEN 'PAID'\n      WHEN subscription_net = 0 OR subscription_net IS NULL THEN 'FREE'\n    END as page_type,\n\n    -- Calculate buy rate for performance metrics\n    SAFE_DIVIDE(active_fans, GREATEST(message_net, 1)) as buy_rate,\n\n    -- Extract additional metrics\n    COALESCE(renew_on_percent, 0) as rebill_rate,\n    COALESCE(total_earnings_net, 0) as weekly_revenue\n\n  FROM `of-scheduler-proj.eros_source.creator_statistics_final`\n  WHERE username_std IS NOT NULL\n    AND username_std != ''\n),\n\n-- Identify creators with both FREE and PAID pages\ndual_page_creators AS (\n  SELECT\n    username_std,\n    COUNT(DISTINCT page_type) as page_type_count,\n    STRING_AGG(DISTINCT page_type ORDER BY page_type) as page_types\n  FROM page_type_detection\n  GROUP BY username_std\n  HAVING COUNT(DISTINCT page_type) = 2\n),\n\n-- Final page assignments with dual-page handling\nfinal_assignments AS (\n  SELECT\n    ptd.username_std,\n    ptd.subscription_price,\n    ptd.total_followers,\n    ptd.weekly_revenue,\n    ptd.rebill_rate,\n    ptd.ppv_sends_7d,\n    ptd.ppv_buys_7d,\n    ptd.buy_rate,\n    ptd.assignment_date,\n    ptd.page_type as individual_page_type,\n\n    -- Determine final page classification\n    CASE\n      WHEN dpc.username_std IS NOT NULL THEN 'BOTH'\n      ELSE ptd.page_type\n    END as final_page_type,\n\n    -- Create unique page handles for dual-page creators\n    CASE\n      WHEN dpc.username_std IS NOT NULL THEN\n        CONCAT(ptd.username_std, '_', LOWER(ptd.page_type))\n      ELSE ptd.username_std\n    END as page_handle,\n\n    -- Determine messaging strategy based on page type\n    CASE ptd.page_type\n      WHEN 'FREE' THEN 'conversion_focused'\n      WHEN 'PAID' THEN 'retention_focused'\n    END as messaging_strategy,\n\n    -- Flag primary page for BOTH scenarios (highest revenue)\n    CASE\n      WHEN dpc.username_std IS NOT NULL THEN\n        ROW_NUMBER() OVER (\n          PARTITION BY ptd.username_std\n          ORDER BY ptd.weekly_revenue DESC, ptd.total_followers DESC\n        ) = 1\n      ELSE TRUE\n    END as is_primary_page\n\n  FROM page_type_detection ptd\n  LEFT JOIN dual_page_creators dpc ON ptd.username_std = dpc.username_std\n)\n\nSELECT\n  username_std,\n  page_handle,\n  individual_page_type as page_type,\n  final_page_type,\n  messaging_strategy,\n  is_primary_page,\n  subscription_price,\n  total_followers,\n  weekly_revenue,\n  rebill_rate,\n  ppv_sends_7d,\n  ppv_buys_7d,\n  buy_rate,\n  assignment_date,\n\n  -- Additional metadata for tier calculation\n  CASE individual_page_type\n    WHEN 'FREE' THEN 'High volume, conversion-focused messaging'\n    WHEN 'PAID' THEN 'Premium quality, retention-focused messaging'\n  END as strategy_description\n\nFROM final_assignments\nWHERE assignment_date = CURRENT_DATE()",
            "disabled": false,
            "fileName": "definitions/messaging/feat/creator_page_assignments.sqlx",
            "bigquery": {
                "clusterBy": [
                    "username_std",
                    "page_type"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "page_types"
            ],
            "actionDescriptor": {
                "description": "Page type assignments for each creator with FREE/PAID/BOTH detection",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_source",
                    "name": "creator_statistics_final",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "creator_page_assignments",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "creator_tier_assignments",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH tier_scoring AS (\n  SELECT\n    username_std,\n    page_handle,\n    page_type,\n    final_page_type,\n    messaging_strategy,\n    is_primary_page,\n    subscription_price,\n    total_followers,\n    weekly_revenue,\n    rebill_rate,\n    ppv_sends_7d,\n    ppv_buys_7d,\n    buy_rate,\n    assignment_date,\n\n    -- Calculate percentile ranks within page type groups\n    PERCENT_RANK() OVER (\n      PARTITION BY page_type\n      ORDER BY weekly_revenue\n    ) as revenue_pct,\n\n    PERCENT_RANK() OVER (\n      PARTITION BY page_type\n      ORDER BY total_followers\n    ) as followers_pct,\n\n    PERCENT_RANK() OVER (\n      PARTITION BY page_type\n      ORDER BY buy_rate\n    ) as buy_rate_pct,\n\n    -- Page-type specific tier scoring algorithms\n    CASE page_type\n      WHEN 'FREE' THEN\n        -- FREE pages: Emphasize conversion metrics and volume potential\n        0.45 * PERCENT_RANK() OVER (PARTITION BY page_type ORDER BY weekly_revenue) +\n        0.35 * PERCENT_RANK() OVER (PARTITION BY page_type ORDER BY buy_rate) +\n        0.20 * PERCENT_RANK() OVER (PARTITION BY page_type ORDER BY total_followers)\n      WHEN 'PAID' THEN\n        -- PAID pages: Emphasize revenue and retention\n        0.50 * PERCENT_RANK() OVER (PARTITION BY page_type ORDER BY weekly_revenue) +\n        0.30 * COALESCE(rebill_rate, 0) +\n        0.20 * PERCENT_RANK() OVER (PARTITION BY page_type ORDER BY total_followers)\n    END as tier_score,\n\n    -- Additional performance metrics for tier refinement\n    CASE\n      WHEN buy_rate >= 0.08 THEN 'high_converter'\n      WHEN buy_rate >= 0.05 THEN 'good_converter'\n      WHEN buy_rate >= 0.03 THEN 'average_converter'\n      ELSE 'low_converter'\n    END as conversion_performance,\n\n    CASE\n      WHEN weekly_revenue >= 2000 THEN 'high_earner'\n      WHEN weekly_revenue >= 1000 THEN 'good_earner'\n      WHEN weekly_revenue >= 500 THEN 'average_earner'\n      ELSE 'low_earner'\n    END as revenue_performance\n\n  FROM `of-scheduler-proj.eros_messaging_feat.creator_page_assignments`\n  WHERE assignment_date = CURRENT_DATE()\n),\n\ntier_assignments AS (\n  SELECT\n    *,\n\n    -- Base tier calculation (A/B/C/D)\n    CASE\n      WHEN tier_score >= 0.85 THEN 'D'  -- Intensive (Top 15%)\n      WHEN tier_score >= 0.60 THEN 'C'  -- Established (Top 40%)\n      WHEN tier_score >= 0.35 THEN 'B'  -- Balanced (Top 65%)\n      ELSE 'A'                          -- Launch (Bottom 35%)\n    END as base_tier,\n\n    -- Full tier assignment with page type\n    CONCAT(\n      CASE\n        WHEN tier_score >= 0.85 THEN 'D'\n        WHEN tier_score >= 0.60 THEN 'C'\n        WHEN tier_score >= 0.35 THEN 'B'\n        ELSE 'A'\n      END,\n      '_',\n      page_type\n    ) as full_tier_assignment,\n\n    -- Tier confidence score\n    CASE\n      WHEN tier_score >= 0.85 OR tier_score < 0.35 THEN 'HIGH'\n      WHEN tier_score >= 0.75 OR tier_score < 0.45 THEN 'MEDIUM'\n      ELSE 'LOW'\n    END as tier_confidence,\n\n    -- Risk assessment\n    CASE\n      WHEN buy_rate < 0.02 AND weekly_revenue < 300 THEN 'HIGH_RISK'\n      WHEN buy_rate < 0.03 AND weekly_revenue < 500 THEN 'MEDIUM_RISK'\n      ELSE 'LOW_RISK'\n    END as performance_risk\n\n  FROM tier_scoring\n),\n\n-- Add tier descriptions and strategy recommendations\nfinal_tier_assignments AS (\n  SELECT\n    *,\n\n    -- Tier description with new mandatory requirements\n    CASE full_tier_assignment\n      WHEN 'A_FREE' THEN 'Launch Free: 8 total daily (6 drip + 2-8 PPVs). Volume-focused conversion.'\n      WHEN 'A_PAID' THEN 'Launch Paid: 9 total daily (6 drip + 3-6 PPVs). Quality retention focus.'\n      WHEN 'B_FREE' THEN 'Balanced Free: 10 total daily (6 drip + 4-8 PPVs). Steady conversion strategy.'\n      WHEN 'B_PAID' THEN 'Balanced Paid: 10 total daily (6 drip + 4-6 PPVs). Retention approach.'\n      WHEN 'C_FREE' THEN 'Established Free: 12 total daily (6 drip + 6-10 PPVs). Optimized conversion.'\n      WHEN 'C_PAID' THEN 'Established Paid: 11 total daily (6 drip + 5-8 PPVs). Premium retention.'\n      WHEN 'D_FREE' THEN 'Intensive Free: 15 total daily (6 drip + 9-14 PPVs). Maximum volume.'\n      WHEN 'D_PAID' THEN 'Intensive Paid: 13 total daily (6 drip + 7-10 PPVs). VIP experience.'\n      ELSE 'Unknown tier configuration'\n    END as tier_description,\n\n    -- Expected daily message range (based on new tier structure)\n    CASE full_tier_assignment\n      WHEN 'A_FREE' THEN STRUCT(8 as base_quota, 2 as min_ppvs, 8 as max_ppvs)\n      WHEN 'A_PAID' THEN STRUCT(9 as base_quota, 3 as min_ppvs, 6 as max_ppvs)\n      WHEN 'B_FREE' THEN STRUCT(10 as base_quota, 4 as min_ppvs, 8 as max_ppvs)\n      WHEN 'B_PAID' THEN STRUCT(10 as base_quota, 4 as min_ppvs, 6 as max_ppvs)\n      WHEN 'C_FREE' THEN STRUCT(12 as base_quota, 6 as min_ppvs, 10 as max_ppvs)\n      WHEN 'C_PAID' THEN STRUCT(11 as base_quota, 5 as min_ppvs, 8 as max_ppvs)\n      WHEN 'D_FREE' THEN STRUCT(15 as base_quota, 9 as min_ppvs, 14 as max_ppvs)\n      WHEN 'D_PAID' THEN STRUCT(13 as base_quota, 7 as min_ppvs, 10 as max_ppvs)\n      ELSE STRUCT(8 as base_quota, 2 as min_ppvs, 6 as max_ppvs)\n    END as daily_quota_range\n\n  FROM tier_assignments\n)\n\nSELECT\n  username_std,\n  page_handle,\n  page_type,\n  final_page_type,\n  messaging_strategy,\n  is_primary_page,\n  base_tier,\n  full_tier_assignment,\n  tier_score,\n  tier_confidence,\n  tier_description,\n  daily_quota_range.base_quota as base_daily_quota,\n  daily_quota_range.min_ppvs as min_daily_ppvs,\n  daily_quota_range.max_ppvs as max_daily_ppvs,\n  6 as mandatory_drip_bumps,  -- Always 6 for all tiers\n  3 as mandatory_renewals,    -- Always 3 for all tiers\n  1 as mandatory_wall_posts,  -- Always 1 for all tiers\n\n  -- Performance metrics\n  revenue_pct,\n  followers_pct,\n  buy_rate_pct,\n  conversion_performance,\n  revenue_performance,\n  performance_risk,\n\n  -- Raw data for reference\n  subscription_price,\n  total_followers,\n  weekly_revenue,\n  rebill_rate,\n  ppv_sends_7d,\n  ppv_buys_7d,\n  buy_rate,\n  assignment_date,\n\n  -- Metadata\n  CURRENT_TIMESTAMP() as created_at,\n  'tier_assignment_v1' as assignment_version\n\nFROM final_tier_assignments",
            "disabled": false,
            "fileName": "definitions/messaging/feat/creator_tier_assignments.sqlx",
            "bigquery": {
                "clusterBy": [
                    "username_std",
                    "full_tier_assignment"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "tier_assignments"
            ],
            "actionDescriptor": {
                "description": "Creator tier assignments with page-type aware scoring and tier classification",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_page_assignments",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "creator_tier_assignments",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "messages_enriched",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH timezone_context AS (\n  SELECT\n    m.*,\n    DATETIME(m.sending_ts, COALESCE(tz.timezone_iana, 'UTC')) AS local_sending_dt\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages` m\n  LEFT JOIN `of-scheduler-proj.eros_core_dim.dim_creator_timezone` tz \n    ON m.username_std = tz.username_std\n),\n\nenriched_base AS (\n  SELECT \n    tc.*,\n    EXTRACT(HOUR FROM tc.local_sending_dt) AS local_hour,\n    FORMAT_DATE('%A', DATE(tc.local_sending_dt)) AS local_day_of_week,\n    EXTRACT(DAYOFWEEK FROM DATE(tc.local_sending_dt)) IN (1, 7) AS is_weekend,\n\n    -- Performance metrics (PROBLEMS 2,5: PRICING & QUALITY)\n    COALESCE(SAFE_DIVIDE(tc.purchased_count, tc.sent_count), 0) AS purchase_rate,\n    COALESCE(SAFE_DIVIDE(tc.earnings_total, tc.sent_count), 0) AS rpm,\n    COALESCE(SAFE_DIVIDE(tc.viewed_count, tc.sent_count), 0) AS view_rate\n  FROM timezone_context tc\n)\n\nSELECT * FROM enriched_base\nWHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)\n",
            "disabled": false,
            "fileName": "definitions/messaging/feat/messages_enriched.sqlx",
            "bigquery": {
                "partitionBy": "sending_date",
                "clusterBy": [
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_feat"
            ],
            "actionDescriptor": {
                "description": "Messages enriched with time features and performance metrics",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_core_dim",
                    "name": "dim_creator_timezone",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "messages_enriched",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "tier_baseline_templates",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nSELECT * FROM UNNEST([\n  -- TIER A_FREE: LAUNCH FREE (Volume-focused conversion)\n  STRUCT(\n    'A_FREE' as tier_id,\n    'Launch Free' as tier_name,\n    'FREE' as page_type,\n    'A' as base_tier,\n    'conversion_aggressive' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    8 as base_daily_quota,  -- Target total messages per day (AI will optimize)\n    4 as min_drip_bumps,   -- Minimum drip bumps (AI will optimize 4-8)\n    8 as max_drip_bumps,   -- Maximum drip bumps for this tier\n    2 as min_daily_ppvs,   -- Minimum PPVs (AI will optimize based on performance)\n    8 as max_daily_ppvs,   -- Maximum PPVs for this tier\n    1 as min_renewals,     -- Minimum renewal campaigns (AI will optimize 1-5)\n    5 as max_renewals,     -- Maximum renewals for tier strategy\n    1 as mandatory_wall_posts,  -- Minimum wall posts per day\n\n    -- DRIP BUMP SCHEDULE (Mandatory - cannot be changed)\n    [\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE (Mandatory)\n    [\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY\n    STRUCT(25.0 as min, 40.0 as max) as premium_price_range,\n    STRUCT(12.0 as min, 18.0 as max) as mid_price_range,\n    STRUCT(5.0 as min, 8.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS (Flexible - AI will optimize within these)\n    [\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Morning PPV' as label, '11:00-13:00' as base_time, 'ppv_mid' as template_type, 11 as hour, 0 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Afternoon PPV' as label, '15:00-17:00' as base_time, 'ppv_mid' as template_type, 15 as hour, 0 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Prime Evening' as label, '21:00-22:00' as base_time, 'ppv_premium' as template_type, 21 as hour, 0 as randomize_minutes),\n      STRUCT('A_FREE' as tier_id, 'Launch Free' as tier_name, 'FREE' as page_type, 'Late Night' as label, '00:30-01:30' as base_time, 'ppv_teaser' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS (AI will add based on performance)\n    2 as max_tip_campaigns_per_week,\n    3 as max_link_drops_per_day,\n\n    -- META\n    'Launch Free: 8 total daily messages (6 mandatory drip + 2-8 PPVs). Volume-focused conversion strategy.' as description,\n    90 as min_spacing_minutes,  -- Reduced for higher volume\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER A_PAID: LAUNCH PAID (Quality over quantity)\n  STRUCT(\n    'A_PAID' as tier_id,\n    'Launch Paid' as tier_name,\n    'PAID' as page_type,\n    'A' as base_tier,\n    'retention_quality' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    9 as base_daily_quota,  -- Target total messages per day (AI will optimize)\n    4 as min_drip_bumps,   -- Minimum drip bumps (AI will optimize 4-7)\n    7 as max_drip_bumps,   -- Maximum for quality-focused tier\n    3 as min_daily_ppvs,   -- Minimum PPVs (AI will optimize based on performance)\n    6 as max_daily_ppvs,   -- Quality focus - fewer but higher value\n    2 as min_renewals,     -- Minimum renewal campaigns (AI will optimize 2-4)\n    4 as max_renewals,     -- Maximum renewals for quality tier\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE (Same for all tiers)\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY (Higher prices for paid pages)\n    STRUCT(45.0 as min, 70.0 as max) as premium_price_range,\n    STRUCT(25.0 as min, 35.0 as max) as mid_price_range,\n    STRUCT(12.0 as min, 18.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS (Focus on premium times)\n    [\n      STRUCT('Afternoon Premium' as label, '15:30-17:30' as time_range, 'premium' as price_type, [15, 16, 17] as hours),\n      STRUCT('Prime Evening' as label, '20:30-22:30' as time_range, 'premium' as price_type, [20, 21, 22] as hours),\n      STRUCT('Late Night Mid' as label, '00:15-01:30' as time_range, 'mid' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    2 as max_tip_campaigns_per_week,\n    2 as max_link_drops_per_day,  -- Less frequent for paid pages\n\n    -- META\n    'Launch Paid: 9 total daily messages (6 mandatory drip + 3-6 PPVs). Premium quality retention focus.' as description,\n    120 as min_spacing_minutes,\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER B_FREE: BALANCED FREE (Steady engagement)\n  STRUCT(\n    'B_FREE' as tier_id,\n    'Balanced Free' as tier_name,\n    'FREE' as page_type,\n    'B' as base_tier,\n    'conversion_balanced' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    10 as base_daily_quota,  -- Target total messages per day (AI will optimize)\n    5 as min_drip_bumps,   -- Minimum drip bumps (AI will optimize 5-8)\n    8 as max_drip_bumps,   -- Maximum drip bumps for this tier\n    4 as min_daily_ppvs,   -- Minimum PPVs (AI will optimize based on performance)\n    8 as max_daily_ppvs,   -- Maximum PPVs for this tier\n    2 as min_renewals,     -- Minimum renewal campaigns (AI will optimize 2-4)\n    4 as max_renewals,     -- Maximum renewals for balanced tier\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY\n    STRUCT(30.0 as min, 45.0 as max) as premium_price_range,\n    STRUCT(15.0 as min, 25.0 as max) as mid_price_range,\n    STRUCT(6.0 as min, 10.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS\n    [\n      STRUCT('Late Morning' as label, '11:30-13:30' as time_range, 'mid' as price_type, [11, 12, 13] as hours),\n      STRUCT('Early Evening' as label, '18:00-19:30' as time_range, 'mid' as price_type, [18, 19] as hours),\n      STRUCT('Prime Premium' as label, '21:30-22:30' as time_range, 'premium' as price_type, [21, 22] as hours),\n      STRUCT('Late Night' as label, '00:15-01:30' as time_range, 'teaser' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    3 as max_tip_campaigns_per_week,\n    3 as max_link_drops_per_day,\n\n    -- META\n    'Balanced Free: 10 total daily messages (6 drip + 4-8 PPVs). Steady conversion strategy.' as description,\n    100 as min_spacing_minutes,\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER B_PAID: BALANCED PAID (Retention focused)\n  STRUCT(\n    'B_PAID' as tier_id,\n    'Balanced Paid' as tier_name,\n    'PAID' as page_type,\n    'B' as base_tier,\n    'retention_balanced' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    10 as base_daily_quota,  -- 6 drip + 4 minimum PPVs\n    6 as min_drip_bumps,\n    4 as min_daily_ppvs,\n    6 as max_daily_ppvs,\n    3 as min_renewals,\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY\n    STRUCT(40.0 as min, 55.0 as max) as premium_price_range,\n    STRUCT(18.0 as min, 30.0 as max) as mid_price_range,\n    STRUCT(8.0 as min, 12.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS\n    [\n      STRUCT('Late Morning' as label, '11:30-13:30' as time_range, 'mid' as price_type, [11, 12, 13] as hours),\n      STRUCT('Early Evening' as label, '18:00-19:30' as time_range, 'mid' as price_type, [18, 19] as hours),\n      STRUCT('Prime Premium' as label, '21:30-22:30' as time_range, 'premium' as price_type, [21, 22] as hours),\n      STRUCT('Late Night Mid' as label, '00:15-01:30' as time_range, 'mid' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    3 as max_tip_campaigns_per_week,\n    2 as max_link_drops_per_day,\n\n    -- META\n    'Balanced Paid: 10 total daily messages (6 drip + 4-6 PPVs). Retention strategy for established pages.' as description,\n    120 as min_spacing_minutes,\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER C_FREE: ESTABLISHED FREE (Optimized performance)\n  STRUCT(\n    'C_FREE' as tier_id,\n    'Established Free' as tier_name,\n    'FREE' as page_type,\n    'C' as base_tier,\n    'conversion_optimized' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    12 as base_daily_quota,  -- 6 drip + 6 minimum PPVs\n    6 as min_drip_bumps,\n    6 as min_daily_ppvs,\n    10 as max_daily_ppvs,\n    3 as min_renewals,\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY\n    STRUCT(35.0 as min, 50.0 as max) as premium_price_range,\n    STRUCT(15.0 as min, 28.0 as max) as mid_price_range,\n    STRUCT(5.0 as min, 10.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS (More options for established pages)\n    [\n      STRUCT('Late Morning' as label, '09:45-11:00' as time_range, 'mid' as price_type, [9, 10, 11] as hours),\n      STRUCT('Early Afternoon' as label, '13:00-14:30' as time_range, 'mid' as price_type, [13, 14] as hours),\n      STRUCT('Drive Time' as label, '17:30-19:00' as time_range, 'mid' as price_type, [17, 18, 19] as hours),\n      STRUCT('Prime Premium' as label, '21:30-22:30' as time_range, 'premium' as price_type, [21, 22] as hours),\n      STRUCT('Late Evening' as label, '23:15-00:15' as time_range, 'mid' as price_type, [23, 0] as hours),\n      STRUCT('Late Premium' as label, '00:15-01:30' as time_range, 'premium' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    4 as max_tip_campaigns_per_week,\n    3 as max_link_drops_per_day,\n\n    -- META\n    'Established Free: 12 total daily messages (6 drip + 6-10 PPVs). Optimized conversion for growing pages.' as description,\n    90 as min_spacing_minutes,\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER C_PAID: ESTABLISHED PAID (Premium retention)\n  STRUCT(\n    'C_PAID' as tier_id,\n    'Established Paid' as tier_name,\n    'PAID' as page_type,\n    'C' as base_tier,\n    'retention_premium' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    11 as base_daily_quota,  -- 6 drip + 5 minimum PPVs\n    6 as min_drip_bumps,\n    5 as min_daily_ppvs,\n    8 as max_daily_ppvs,\n    3 as min_renewals,\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY\n    STRUCT(45.0 as min, 65.0 as max) as premium_price_range,\n    STRUCT(20.0 as min, 30.0 as max) as mid_price_range,\n    STRUCT(8.0 as min, 12.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS\n    [\n      STRUCT('Late Morning' as label, '09:45-11:00' as time_range, 'mid' as price_type, [9, 10, 11] as hours),\n      STRUCT('Early Afternoon' as label, '13:00-14:30' as time_range, 'mid' as price_type, [13, 14] as hours),\n      STRUCT('Drive Time' as label, '17:30-19:00' as time_range, 'premium' as price_type, [17, 18, 19] as hours),\n      STRUCT('Prime Premium' as label, '21:30-22:30' as time_range, 'premium' as price_type, [21, 22] as hours),\n      STRUCT('Late Evening' as label, '23:15-00:15' as time_range, 'mid' as price_type, [23, 0] as hours),\n      STRUCT('Late Premium' as label, '00:15-01:30' as time_range, 'premium' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    4 as max_tip_campaigns_per_week,\n    2 as max_link_drops_per_day,\n\n    -- META\n    'Established Paid: 11 total daily messages (6 drip + 5-8 PPVs). Premium retention for loyal subscribers.' as description,\n    120 as min_spacing_minutes,\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER D_FREE: INTENSIVE FREE (Maximum volume)\n  STRUCT(\n    'D_FREE' as tier_id,\n    'Intensive Free' as tier_name,\n    'FREE' as page_type,\n    'D' as base_tier,\n    'conversion_intensive' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    15 as base_daily_quota,  -- 6 drip + 9 minimum PPVs\n    6 as min_drip_bumps,\n    9 as min_daily_ppvs,\n    14 as max_daily_ppvs,  -- Maximum volume for high performers\n    3 as min_renewals,\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY\n    STRUCT(35.0 as min, 55.0 as max) as premium_price_range,\n    STRUCT(15.0 as min, 30.0 as max) as mid_price_range,\n    STRUCT(5.0 as min, 10.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS (Multiple slots for high volume)\n    [\n      STRUCT('Late Morning' as label, '09:45-11:00' as time_range, 'mid' as price_type, [9, 10, 11] as hours),\n      STRUCT('Early Afternoon' as label, '13:00-14:30' as time_range, 'mid' as price_type, [13, 14] as hours),\n      STRUCT('Drive Time' as label, '17:30-19:00' as time_range, 'mid' as price_type, [17, 18, 19] as hours),\n      STRUCT('Prime Premium' as label, '21:30-22:30' as time_range, 'premium' as price_type, [21, 22] as hours),\n      STRUCT('Late Evening' as label, '23:15-00:15' as time_range, 'mid' as price_type, [23, 0] as hours),\n      STRUCT('Late Premium' as label, '00:15-01:30' as time_range, 'premium' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    5 as max_tip_campaigns_per_week,\n    4 as max_link_drops_per_day,\n\n    -- META\n    'Intensive Free: 15 total daily messages (6 drip + 9-14 PPVs). Maximum volume for top performers.' as description,\n    75 as min_spacing_minutes,  -- Faster pacing for high volume\n    45 as randomize_offset_minutes\n  ),\n\n  -- TIER D_PAID: INTENSIVE PAID (VIP experience)\n  STRUCT(\n    'D_PAID' as tier_id,\n    'Intensive Paid' as tier_name,\n    'PAID' as page_type,\n    'D' as base_tier,\n    'retention_vip' as strategy,\n\n    -- AI-OPTIMIZED DAILY GUIDELINES (Data-driven baselines)\n    13 as base_daily_quota,  -- 6 drip + 7 minimum PPVs\n    6 as min_drip_bumps,\n    7 as min_daily_ppvs,\n    10 as max_daily_ppvs,\n    3 as min_renewals,\n    1 as mandatory_wall_posts,\n\n    -- DRIP BUMP SCHEDULE\n    [\n      STRUCT('Morning Drip 1' as label, '07:00' as base_time, 'drip_morning' as template_type, 7 as hour, 45 as randomize_minutes),\n      STRUCT('Morning Drip 2' as label, '10:00' as base_time, 'drip_morning' as template_type, 10 as hour, 45 as randomize_minutes),\n      STRUCT('Afternoon Drip' as label, '14:00' as base_time, 'drip_afternoon' as template_type, 14 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 1' as label, '20:00' as base_time, 'drip_evening' as template_type, 20 as hour, 45 as randomize_minutes),\n      STRUCT('Evening Drip 2' as label, '23:00' as base_time, 'drip_evening' as template_type, 23 as hour, 45 as randomize_minutes),\n      STRUCT('Late Night Drip' as label, '02:00' as base_time, 'drip_late' as template_type, 2 as hour, 45 as randomize_minutes)\n    ] as drip_schedule,\n\n    -- RENEWAL CAMPAIGN SCHEDULE\n    [\n      STRUCT('Morning Renewal' as label, '08:00' as base_time, 'renewal_morning' as template_type, 8 as hour, 30 as randomize_minutes),\n      STRUCT('Afternoon Renewal' as label, '16:00' as base_time, 'renewal_afternoon' as template_type, 16 as hour, 30 as randomize_minutes),\n      STRUCT('Midnight Renewal' as label, '00:00' as base_time, 'renewal_midnight' as template_type, 0 as hour, 30 as randomize_minutes)\n    ] as renewal_schedule,\n\n    -- PPV PRICING STRATEGY (Highest prices for VIP tier)\n    STRUCT(50.0 as min, 75.0 as max) as premium_price_range,\n    STRUCT(20.0 as min, 35.0 as max) as mid_price_range,\n    STRUCT(8.0 as min, 15.0 as max) as teaser_price_range,\n\n    -- PPV TIMING WINDOWS (Premium focus)\n    [\n      STRUCT('Late Morning Premium' as label, '09:45-11:00' as time_range, 'premium' as price_type, [9, 10, 11] as hours),\n      STRUCT('Early Afternoon' as label, '13:00-14:30' as time_range, 'mid' as price_type, [13, 14] as hours),\n      STRUCT('Drive Time Premium' as label, '17:30-19:00' as time_range, 'premium' as price_type, [17, 18, 19] as hours),\n      STRUCT('Prime Premium' as label, '21:30-22:30' as time_range, 'premium' as price_type, [21, 22] as hours),\n      STRUCT('Late Evening' as label, '23:15-00:15' as time_range, 'mid' as price_type, [23, 0] as hours),\n      STRUCT('Late Premium' as label, '00:15-01:30' as time_range, 'premium' as price_type, [0, 1] as hours)\n    ] as ppv_windows,\n\n    -- OPTIONAL COMPONENTS\n    5 as max_tip_campaigns_per_week,\n    3 as max_link_drops_per_day,\n\n    -- META\n    'Intensive Paid: 13 total daily messages (6 drip + 7-10 PPVs). VIP experience for whale subscribers.' as description,\n    120 as min_spacing_minutes,\n    45 as randomize_offset_minutes\n  )\n]) AS tier_templates",
            "disabled": false,
            "fileName": "definitions/messaging/feat/tier_baseline_templates.sqlx",
            "bigquery": {
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "tier_templates"
            ],
            "actionDescriptor": {
                "description": "Baseline tier templates with quotas, pricing, and timing windows for each tier/page type combination",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "tier_baseline_templates",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_feat",
                "name": "tier_weekly_adjustments",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH base_data AS (\n  SELECT\n    cta.username_std,\n    cta.page_type,\n    cta.final_page_type,\n    cta.full_tier_assignment,\n    cta.base_tier,\n    me.message_sk,\n    me.earnings_total,\n    me.purchased_count,\n    me.sent_count,\n    me.sending_date,\n    DATE_TRUNC(me.sending_date, WEEK) as week_start\n  FROM `of-scheduler-proj.eros_messaging_feat.creator_tier_assignments` cta\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.messages_enriched` me\n    ON cta.username_std = me.username_std\n    AND me.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n    AND me.sending_date < CURRENT_DATE()\n  WHERE cta.assignment_date = CURRENT_DATE()\n),\n\nweekly_aggregates AS (\n  SELECT\n    username_std,\n    page_type,\n    week_start,\n    COUNT(message_sk) as messages_count,\n    SUM(earnings_total) as total_earnings,\n    SAFE_DIVIDE(SUM(earnings_total), COUNT(message_sk)) as rpm_week\n  FROM base_data\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n  GROUP BY username_std, page_type, week_start\n),\n\nweekly_with_lag AS (\n  SELECT\n    *,\n    LAG(rpm_week, 1) OVER (\n      PARTITION BY username_std, page_type\n      ORDER BY week_start\n    ) as rpm_previous_week\n  FROM weekly_aggregates\n),\n\nweekly_performance AS (\n  SELECT\n    CONCAT(bd.username_std,\n           CASE WHEN bd.page_type != bd.final_page_type\n           THEN CONCAT('_', LOWER(bd.page_type))\n           ELSE '' END) as page_handle,\n    bd.username_std,\n    bd.page_type,\n    bd.full_tier_assignment,\n    bd.base_tier,\n    CURRENT_DATE() as adjustment_date,\n\n    -- Performance metrics over last 7 days\n    COUNT(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.message_sk END) as messages_sent_7d,\n    SUM(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.earnings_total ELSE 0 END) as total_revenue_7d,\n    AVG(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.earnings_total END) as avg_revenue_per_message,\n    SUM(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.purchased_count ELSE 0 END) as total_purchases_7d,\n    SUM(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.sent_count ELSE 0 END) as total_recipients_7d,\n    SAFE_DIVIDE(\n      SUM(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.purchased_count ELSE 0 END),\n      SUM(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.sent_count ELSE 0 END)\n    ) as buy_rate,\n\n    -- Revenue per message (RPM)\n    SAFE_DIVIDE(\n      SUM(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.earnings_total ELSE 0 END),\n      COUNT(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN bd.message_sk END)\n    ) as rpm_current,\n\n    -- Previous week RPM from lag calculation\n    MAX(wl.rpm_previous_week) as rpm_previous_week,\n\n    -- Weekend vs weekday performance\n    AVG(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n             AND EXTRACT(DAYOFWEEK FROM bd.sending_date) IN (1, 7)\n             THEN bd.earnings_total ELSE NULL END) as weekend_avg_rpm,\n    AVG(CASE WHEN bd.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n             AND EXTRACT(DAYOFWEEK FROM bd.sending_date) NOT IN (1, 7)\n             THEN bd.earnings_total ELSE NULL END) as weekday_avg_rpm,\n\n    -- Unsubscribe tracking (placeholder - no message_type field available)\n    0 as unsubscribes_7d,\n    0.0 as unsub_rate\n\n  FROM base_data bd\n  LEFT JOIN weekly_with_lag wl\n    ON bd.username_std = wl.username_std\n    AND bd.page_type = wl.page_type\n    AND wl.week_start = DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY), WEEK)\n  GROUP BY 1,2,3,4,5,6\n),\n\nperformance_analysis AS (\n  SELECT\n    *,\n\n    -- Calculate trend direction\n    CASE\n      WHEN rpm_previous_week IS NULL THEN 'new'\n      WHEN rpm_current > rpm_previous_week * 1.1 THEN 'up'\n      WHEN rpm_current < rpm_previous_week * 0.9 THEN 'down'\n      ELSE 'stable'\n    END as rpm_trend,\n\n    -- Weekend boost calculation\n    SAFE_DIVIDE(weekend_avg_rpm, GREATEST(weekday_avg_rpm, 0.01)) as weekend_boost_ratio,\n\n    -- Performance flags\n    CASE\n      WHEN buy_rate >= 0.08 THEN 'high_converter'\n      WHEN buy_rate >= 0.05 THEN 'good_converter'\n      WHEN buy_rate >= 0.03 THEN 'average_converter'\n      ELSE 'low_converter'\n    END as conversion_tier,\n\n    CASE\n      WHEN unsub_rate > 0.08 THEN 'high_churn'\n      WHEN unsub_rate > 0.05 THEN 'moderate_churn'\n      ELSE 'low_churn'\n    END as churn_tier\n\n  FROM weekly_performance\n),\n\nadjustment_rules AS (\n  SELECT\n    *,\n\n    -- Determine adjustment rules based on performance\n    CASE\n      -- Rule 1: High performance - add volume\n      WHEN buy_rate >= 0.07 AND rpm_trend = 'up' THEN 'add_mid_slot_afternoon'\n\n      -- Rule 2: Low performance - reduce volume and pricing\n      WHEN buy_rate < 0.04 THEN 'reduce_ppv_and_price'\n\n      -- Rule 3: High retention creator - add thankyou freebies\n      WHEN buy_rate >= 0.06 AND churn_tier = 'low_churn' THEN 'add_thankyou_freebie'\n\n      -- Rule 4: High churn - reduce volume and step down prices\n      WHEN churn_tier = 'high_churn' THEN 'reduce_volume_step_down_prices'\n\n      -- Rule 5: Strong weekend performance - add weekend premium\n      WHEN weekend_boost_ratio > 1.15 AND weekend_avg_rpm > weekday_avg_rpm THEN 'add_weekend_premium'\n\n      -- Rule 6: Trending down - conservative approach\n      WHEN rpm_trend = 'down' AND buy_rate < 0.05 THEN 'conservative_approach'\n\n      -- Default: maintain baseline\n      ELSE 'maintain_baseline'\n    END as adjustment_rule,\n\n    -- Calculate specific numeric adjustments\n    CASE\n      WHEN buy_rate >= 0.07 AND rpm_trend = 'up' THEN 1  -- Add 1 slot\n      WHEN buy_rate < 0.04 THEN -1                       -- Remove 1 slot\n      WHEN churn_tier = 'high_churn' THEN -1             -- Remove 1 slot\n      WHEN rpm_trend = 'down' AND buy_rate < 0.05 THEN -1 -- Remove 1 slot\n      ELSE 0                                              -- No change\n    END as daily_quota_adjustment,\n\n    CASE\n      WHEN buy_rate < 0.04 THEN -5.0                     -- Reduce prices by $5\n      WHEN churn_tier = 'high_churn' THEN -5.0           -- Reduce prices by $5\n      WHEN rpm_trend = 'down' AND buy_rate < 0.05 THEN -3.0 -- Reduce prices by $3\n      ELSE 0.0                                            -- No price change\n    END as price_adjustment_usd,\n\n    -- Weekend-specific adjustments\n    CASE\n      WHEN weekend_boost_ratio > 1.15 AND weekend_avg_rpm > weekday_avg_rpm THEN 1\n      ELSE 0\n    END as weekend_premium_slots_adjustment,\n\n    -- Special content adjustments\n    CASE\n      WHEN buy_rate >= 0.06 AND churn_tier = 'low_churn' THEN TRUE\n      ELSE FALSE\n    END as add_thankyou_content\n\n  FROM performance_analysis\n),\n\nfinal_adjustments AS (\n  SELECT\n    page_handle,\n    username_std,\n    page_type,\n    full_tier_assignment,\n    base_tier,\n    adjustment_date,\n    adjustment_rule,\n\n    -- Performance metrics\n    buy_rate,\n    rpm_current,\n    rpm_trend,\n    weekend_boost_ratio,\n    conversion_tier,\n    churn_tier,\n    messages_sent_7d,\n    total_revenue_7d,\n\n    -- Adjustment values\n    daily_quota_adjustment,\n    price_adjustment_usd,\n    weekend_premium_slots_adjustment,\n    add_thankyou_content,\n\n    -- Adjustment reasoning\n    CASE adjustment_rule\n      WHEN 'add_mid_slot_afternoon' THEN\n        CONCAT('High performance: Buy rate ', ROUND(buy_rate * 100, 1), '% with upward trend. Adding afternoon slot.')\n      WHEN 'reduce_ppv_and_price' THEN\n        CONCAT('Low performance: Buy rate ', ROUND(buy_rate * 100, 1), '%. Reducing volume and pricing.')\n      WHEN 'add_thankyou_freebie' THEN\n        CONCAT('High retention: Buy rate ', ROUND(buy_rate * 100, 1), '% with low churn. Adding thankyou content.')\n      WHEN 'reduce_volume_step_down_prices' THEN\n        CONCAT('High churn: ', ROUND(unsub_rate * 100, 1), '% unsub rate. Reducing volume and prices.')\n      WHEN 'add_weekend_premium' THEN\n        CONCAT('Weekend boost: ', ROUND((weekend_boost_ratio - 1) * 100, 1), '% higher weekend RPM. Adding premium slots.')\n      WHEN 'conservative_approach' THEN\n        CONCAT('Declining trend: RPM down with ', ROUND(buy_rate * 100, 1), '% buy rate. Conservative approach.')\n      ELSE 'Performance stable - maintaining baseline tier configuration.'\n    END as adjustment_reasoning,\n\n    -- Confidence in adjustment\n    CASE\n      WHEN messages_sent_7d >= 20 AND ABS(daily_quota_adjustment) <= 1 THEN 'HIGH'\n      WHEN messages_sent_7d >= 10 AND ABS(daily_quota_adjustment) <= 2 THEN 'MEDIUM'\n      ELSE 'LOW'\n    END as adjustment_confidence,\n\n    -- Meta\n    CURRENT_TIMESTAMP() as created_at,\n    'tier_adjustment_v1' as adjustment_version\n\n  FROM adjustment_rules\n  WHERE adjustment_rule != 'maintain_baseline'  -- Only store active adjustments\n)\n\nSELECT\n  page_handle,\n  username_std,\n  page_type,\n  full_tier_assignment,\n  base_tier,\n  adjustment_date,\n  adjustment_rule,\n  adjustment_reasoning,\n  adjustment_confidence,\n\n  -- Performance context\n  buy_rate,\n  rpm_current,\n  rpm_trend,\n  weekend_boost_ratio,\n  conversion_tier,\n  churn_tier,\n  messages_sent_7d,\n  total_revenue_7d,\n\n  -- Adjustments to apply\n  daily_quota_adjustment,\n  price_adjustment_usd,\n  weekend_premium_slots_adjustment,\n  add_thankyou_content,\n\n  -- Validity period (adjustments active for 7 days)\n  adjustment_date as valid_from_date,\n  DATE_ADD(adjustment_date, INTERVAL 7 DAY) as valid_until_date,\n\n  -- Meta\n  created_at,\n  adjustment_version\n\nFROM final_adjustments",
            "disabled": false,
            "fileName": "definitions/messaging/feat/tier_weekly_adjustments.sqlx",
            "bigquery": {
                "clusterBy": [
                    "page_handle",
                    "adjustment_rule"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "tags": [
                "messaging_feat",
                "tier_adjustments"
            ],
            "actionDescriptor": {
                "description": "Weekly performance-based adjustments to tier baseline templates",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_tier_assignments",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_feat",
                "name": "tier_weekly_adjustments",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_mart",
                "name": "caption_rank_next24_v3_tbl",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH time_slots AS (\n  SELECT\n    slot_ts,\n    DATE(slot_ts, 'America/New_York') as slot_dt_local,\n    EXTRACT(HOUR FROM slot_ts AT TIME ZONE 'America/New_York') as hod\n  FROM UNNEST(GENERATE_TIMESTAMP_ARRAY(\n    TIMESTAMP_TRUNC(CURRENT_TIMESTAMP(), HOUR),\n    TIMESTAMP_ADD(TIMESTAMP_TRUNC(CURRENT_TIMESTAMP(), HOUR), INTERVAL 24 HOUR),\n    INTERVAL 1 HOUR\n  )) as slot_ts\n),\n\nactive_creators AS (\n  SELECT DISTINCT username_std\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)\n),\n\ncreator_pages AS (\n  SELECT\n    username_std,\n    CONCAT(username_std, '__main') as username_page\n  FROM active_creators\n),\n\n-- Historical performance by caption and timing\ncaption_performance AS (\n  SELECT\n    CONCAT(m.username_std, '__main') as username_page,\n    EXTRACT(HOUR FROM m.sending_ts AT TIME ZONE 'America/New_York') as hod,\n    c.caption_sk as caption_id,\n    c.caption_text,\n    AVG(m.earnings_total) as avg_revenue,\n    COUNT(*) as usage_count,\n    MAX(m.sending_ts) as last_used_at,\n    AVG(CASE WHEN m.earnings_total > 0 THEN m.earnings_total / GREATEST(m.price, 1) ELSE 0 END) as avg_roi\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages` m\n  JOIN `of-scheduler-proj.eros_messaging_stg.captions` c ON LOWER(REGEXP_REPLACE(m.message_text, r'\\s+', ' ')) = LOWER(REGEXP_REPLACE(c.caption_text, r'\\s+', ' '))\n  WHERE m.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)\n    AND c.caption_type IN ('PPV', 'TIP', 'RENEW', 'BUMP')\n  GROUP BY username_page, hod, caption_id, caption_text\n  HAVING usage_count >= 1\n),\n\n-- Theme-based scoring\ntheme_scoring AS (\n  SELECT\n    c.caption_sk as caption_id,\n    c.caption_text,\n    cts.primary_theme,\n    cts.explicitness_level,\n    cts.explicitness_score,\n    CASE cts.primary_theme\n      WHEN 'JOI / Instruction' THEN 0.9\n      WHEN 'Solo Touch' THEN 0.85\n      WHEN 'Toy Play (Hands)' THEN 0.8\n      WHEN 'B/G Action' THEN 0.95\n      WHEN 'Bundle / Mega Pack' THEN 0.7\n      WHEN 'Urgent / Last Chance' THEN 0.6\n      ELSE 0.5\n    END as theme_score,\n    CASE cts.explicitness_level\n      WHEN 'Hardcore' THEN 0.9\n      WHEN 'Explicit' THEN 0.8\n      WHEN 'Semi-Explicit' THEN 0.7\n      WHEN 'Playful' THEN 0.6\n      ELSE 0.5\n    END as explicitness_bonus\n  FROM `of-scheduler-proj.eros_messaging_stg.captions` c\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.caption_theme_signals` cts ON c.caption_sk = cts.caption_sk\n  WHERE c.caption_type IN ('PPV', 'TIP', 'RENEW', 'BUMP')\n),\n\n-- All combinations of creators, time slots, and captions\ncaption_candidates AS (\n  SELECT\n    cp.username_page,\n    ts.slot_dt_local,\n    ts.hod,\n    ts.caption_id,\n    ts.caption_text,\n    ts.theme_score,\n    ts.explicitness_bonus\n  FROM creator_pages cp\n  CROSS JOIN time_slots ts_outer\n  CROSS JOIN theme_scoring ts\n  WHERE ts_outer.slot_dt_local = ts.slot_dt_local AND ts_outer.hod = ts.hod\n),\n\n-- Apply performance data and calculate scores\nscored_captions AS (\n  SELECT\n    cc.*,\n    COALESCE(cp.avg_revenue, 10.0) as historical_revenue,\n    COALESCE(cp.avg_roi, 2.0) as historical_roi,\n    COALESCE(cp.usage_count, 0) as usage_count,\n\n    -- Revenue per send expectation\n    (COALESCE(cp.avg_revenue, 10.0) * 0.4 +\n     cc.theme_score * 20 +\n     cc.explicitness_bonus * 15) as rps_eb_price,\n\n    -- Style bonus\n    CASE\n      WHEN COALESCE(cp.usage_count, 0) > 5 THEN 5.0  -- Proven performer\n      WHEN COALESCE(cp.usage_count, 0) > 2 THEN 2.0  -- Some history\n      ELSE 0.0  -- New caption\n    END as style_score,\n\n    -- Special event bonus (seasonal, trending)\n    CASE\n      WHEN LOWER(cc.caption_text) LIKE '%bundle%' THEN 3.0\n      WHEN LOWER(cc.caption_text) LIKE '%special%' THEN 2.0\n      WHEN LOWER(cc.caption_text) LIKE '%limited%' THEN 1.5\n      ELSE 0.0\n    END as se_bonus\n\n  FROM caption_candidates cc\n  LEFT JOIN caption_performance cp\n    ON cc.username_page = cp.username_page\n    AND cc.hod = cp.hod\n    AND cc.caption_id = cp.caption_id\n),\n\nranked_captions AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (\n      PARTITION BY username_page, slot_dt_local, hod\n      ORDER BY (rps_eb_price + COALESCE(style_score, 0) + COALESCE(se_bonus, 0)) DESC,\n               usage_count DESC,\n               caption_id\n    ) as rn\n  FROM scored_captions\n)\n\nSELECT\n  username_page,\n  slot_dt_local,\n  hod,\n  caption_id,\n  caption_text,\n  rps_eb_price,\n  style_score,\n  se_bonus,\n  historical_revenue,\n  historical_roi,\n  usage_count,\n  rn\nFROM ranked_captions\nWHERE rn <= 20  -- Top 20 captions per creator per hour\n  AND slot_dt_local >= CURRENT_DATE('America/New_York')\n  AND slot_dt_local <= DATE_ADD(CURRENT_DATE('America/New_York'), INTERVAL 1 DAY)",
            "disabled": false,
            "fileName": "definitions/messaging/mart/caption_rank_next24_v3_tbl.sqlx",
            "bigquery": {
                "partitionBy": "slot_dt_local",
                "clusterBy": [
                    "username_page",
                    "hod"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_mart",
                "caption_ranking"
            ],
            "actionDescriptor": {
                "description": "Caption ranking system for next 24h with ML scoring",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "captions",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "caption_theme_signals",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_mart",
                "name": "caption_rank_next24_v3_tbl",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_mart",
                "name": "daily_recommendations",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH\nactive_creators_with_tiers AS (\n  SELECT DISTINCT\n    cta.username_std,\n    cta.page_handle,\n    cta.page_type,\n    cta.final_page_type,\n    cta.full_tier_assignment,\n    cta.messaging_strategy,\n    cta.min_daily_messages,\n    cta.max_daily_messages\n  FROM `of-scheduler-proj.eros_messaging_feat.creator_tier_assignments` cta\n  INNER JOIN `of-scheduler-proj.eros_messaging_feat.messages_enriched` me\n    ON cta.username_std = me.username_std\n  WHERE me.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n    AND cta.assignment_date = CURRENT_DATE()\n),\n\ncandidate_slots AS (\n  SELECT\n    ac.username_std,\n    ac.page_handle,\n    ac.page_type,\n    ac.final_page_type,\n    ac.full_tier_assignment,\n    ac.messaging_strategy,\n    ac.min_daily_messages,\n    ac.max_daily_messages,\n    CURRENT_DATE() as recommendation_date,\n    slot_ts,\n    EXTRACT(HOUR FROM slot_ts) as slot_hour,\n    FORMAT_DATE('%A', DATE(slot_ts)) as slot_day_of_week\n  FROM active_creators_with_tiers ac\n  CROSS JOIN UNNEST(\n    GENERATE_TIMESTAMP_ARRAY(\n      TIMESTAMP(CURRENT_DATE()),\n      TIMESTAMP(DATE_ADD(CURRENT_DATE(), INTERVAL 1 DAY)),\n      INTERVAL 30 MINUTE\n    )\n  ) as slot_ts\n),\n\nlast_message_check AS (\n  SELECT\n    cs.*,\n    COALESCE(lm.last_message_ts, TIMESTAMP('2024-01-01')) as last_message_ts,\n    TIMESTAMP_DIFF(cs.slot_ts, COALESCE(lm.last_message_ts, TIMESTAMP('2024-01-01')), HOUR) as hours_since_last\n  FROM candidate_slots cs\n  LEFT JOIN (\n    SELECT\n      username_std,\n      MAX(sending_ts) as last_message_ts\n    FROM `of-scheduler-proj.eros_messaging_feat.messages_enriched`\n    WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)\n    GROUP BY username_std\n  ) lm ON cs.username_std = lm.username_std\n),\n\ntier_constraints AS (\n  SELECT\n    lmc.*,\n    tbt.min_spacing_minutes,\n    tbt.ppv_windows,\n    tbt.premium_price_range,\n    tbt.mid_price_range,\n    tbt.teaser_price_range,\n\n    -- Get weekly adjustments if any\n    COALESCE(twa.daily_quota_adjustment, 0) as quota_adjustment,\n    COALESCE(twa.price_adjustment_usd, 0) as price_adjustment,\n    COALESCE(twa.adjustment_rule, 'maintain_baseline') as adjustment_rule\n\n  FROM last_message_check lmc\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.tier_baseline_templates` tbt\n    ON lmc.full_tier_assignment = tbt.tier_id\n  LEFT JOIN (\n    SELECT * FROM `of-scheduler-proj.eros_messaging_feat.tier_weekly_adjustments`\n    WHERE adjustment_date = CURRENT_DATE()\n      AND CURRENT_DATE() BETWEEN valid_from_date AND valid_until_date\n  ) twa ON lmc.page_handle = twa.page_handle\n),\n\nvalid_slots AS (\n  SELECT\n    tc.*,\n    -- Check if slot hour falls within tier-defined windows\n    EXISTS(\n      SELECT 1 FROM UNNEST(tc.ppv_windows) AS window\n      WHERE tc.slot_hour IN UNNEST(window.hours)\n    ) as in_tier_window,\n\n    -- Apply tier-specific spacing rules\n    COALESCE(tc.min_spacing_minutes, 120) / 60.0 as min_hours_between_messages\n  FROM tier_constraints tc\n  WHERE tc.hours_since_last >= COALESCE(tc.min_spacing_minutes, 120) / 60.0  -- Tier-aware spacing\n    AND tc.slot_hour BETWEEN 8 AND 22  -- Reasonable hours\n    AND tc.ppv_windows IS NOT NULL  -- Must have valid tier template\n),\n\nscored_slots AS (\n  SELECT\n    vs.*,\n\n    -- PROBLEM 1: Timing intelligence (enhanced with tier awareness)\n    COALESCE(hm.avg_rpm, 0.5) as timing_score,\n    COALESCE(hm.confidence_level, 'LOW') as timing_confidence,\n\n    -- PROBLEM 2: Tier-aware pricing opportunity\n    CASE\n      WHEN vs.in_tier_window THEN\n        -- Determine price tier based on slot hour and tier template\n        CASE\n          WHEN EXISTS(\n            SELECT 1 FROM UNNEST(vs.ppv_windows) AS window\n            WHERE vs.slot_hour IN UNNEST(window.hours) AND window.price_type = 'premium'\n          ) THEN 'PREMIUM'\n          WHEN EXISTS(\n            SELECT 1 FROM UNNEST(vs.ppv_windows) AS window\n            WHERE vs.slot_hour IN UNNEST(window.hours) AND window.price_type = 'mid'\n          ) THEN 'MID'\n          WHEN EXISTS(\n            SELECT 1 FROM UNNEST(vs.ppv_windows) AS window\n            WHERE vs.slot_hour IN UNNEST(window.hours) AND window.price_type = 'alternate'\n          ) THEN 'ALTERNATE'\n          ELSE 'MID'\n        END\n      ELSE COALESCE(pb.recommended_price_tier, 'MEDIUM')\n    END as price_tier,\n\n    -- Tier-aware price calculation\n    CASE\n      WHEN vs.in_tier_window AND EXISTS(\n        SELECT 1 FROM UNNEST(vs.ppv_windows) AS window\n        WHERE vs.slot_hour IN UNNEST(window.hours) AND window.price_type = 'premium'\n      ) THEN\n        GREATEST(\n          vs.premium_price_range.min + vs.price_adjustment,\n          vs.premium_price_range.min\n        )\n      WHEN vs.in_tier_window AND EXISTS(\n        SELECT 1 FROM UNNEST(vs.ppv_windows) AS window\n        WHERE vs.slot_hour IN UNNEST(window.hours) AND window.price_type IN ('mid', 'alternate')\n      ) THEN\n        GREATEST(\n          vs.mid_price_range.min + vs.price_adjustment,\n          vs.teaser_price_range.min\n        )\n      ELSE\n        GREATEST(\n          COALESCE(pb.price_medium, vs.mid_price_range.min) + vs.price_adjustment,\n          vs.teaser_price_range.min\n        )\n    END as suggested_price,\n\n    -- PROBLEM 3: Enhanced fatigue safety with tier limits\n    COALESCE(100 - fs.fatigue_risk_score, 50) as fatigue_safety_score,\n    LEAST(\n      COALESCE(fs.recommended_max_daily, vs.max_daily_messages),  -- Fatigue limit\n      vs.max_daily_messages + vs.quota_adjustment                -- Tier limit with adjustment\n    ) as daily_limit,\n\n    -- Enhanced tier-aware recommendation score\n    (\n      -- Base timing performance (30%)\n      COALESCE(hm.avg_rpm, 0.5) * 0.3 +\n\n      -- Fatigue safety (25%)\n      COALESCE((100 - fs.fatigue_risk_score)/100, 0.5) * 0.25 +\n\n      -- Pricing opportunity (20%)\n      CASE\n        WHEN vs.in_tier_window AND EXISTS(\n          SELECT 1 FROM UNNEST(vs.ppv_windows) AS window\n          WHERE vs.slot_hour IN UNNEST(window.hours) AND window.price_type = 'premium'\n        ) THEN 1.0\n        WHEN vs.in_tier_window THEN 0.8\n        ELSE 0.6\n      END * 0.2 +\n\n      -- Tier window compliance bonus (15%)\n      CASE WHEN vs.in_tier_window THEN 1.0 ELSE 0.3 END * 0.15 +\n\n      -- Strategy alignment (10%)\n      CASE vs.messaging_strategy\n        WHEN 'conversion_aggressive' THEN 0.9\n        WHEN 'conversion_intensive' THEN 1.0\n        WHEN 'retention_quality' THEN 0.8\n        WHEN 'retention_vip' THEN 0.9\n        ELSE 0.7\n      END * 0.1\n\n    ) as recommendation_score\n\n  FROM valid_slots vs\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.creator_heatmap` hm\n    ON vs.username_std = hm.username_std\n    AND vs.slot_day_of_week = hm.local_day_of_week\n    AND vs.slot_hour = hm.local_hour\n  LEFT JOIN `of-scheduler-proj.eros_pricing_feat.pricing_bands` pb\n    ON vs.username_std = pb.username_std\n    AND vs.slot_day_of_week = pb.local_day_of_week\n    AND vs.slot_hour = pb.local_hour\n  LEFT JOIN (\n    SELECT * FROM `of-scheduler-proj.eros_ops_feat.fatigue_scores` WHERE score_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n  ) fs\n    ON vs.username_std = fs.username_std\n    AND DATE(vs.slot_ts) = fs.score_date\n),\n\nranked_recommendations AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (\n      PARTITION BY page_handle\n      ORDER BY recommendation_score DESC\n    ) as recommendation_rank,\n\n    -- Enhanced human-readable reasoning with tier context\n    CONCAT(\n      'Tier ', full_tier_assignment, ' slot: ',\n      timing_confidence, ' confidence timing (avg $', ROUND(timing_score, 2), ' RPM), ',\n      price_tier, ' pricing tier ($', suggested_price, '), ',\n      'fatigue safety: ', ROUND(fatigue_safety_score), '/100, ',\n      CASE WHEN in_tier_window THEN 'optimal tier window' ELSE 'outside tier window' END,\n      CASE WHEN adjustment_rule != 'maintain_baseline'\n           THEN CONCAT(' [', adjustment_rule, ']') ELSE '' END\n    ) as recommendation_reason\n\n  FROM scored_slots\n)\n\nSELECT\n  username_std,\n  page_handle,\n  page_type,\n  final_page_type,\n  full_tier_assignment,\n  messaging_strategy,\n  recommendation_date,\n  slot_ts as recommended_send_ts,\n  recommendation_rank,\n  recommendation_score,\n  timing_score,\n  timing_confidence,\n  price_tier,\n  suggested_price,\n  fatigue_safety_score,\n  daily_limit,\n  in_tier_window,\n  adjustment_rule,\n  quota_adjustment,\n  price_adjustment,\n  min_daily_messages,\n  max_daily_messages,\n\n  -- Legacy compatibility aliases\n  fatigue_safety_score as fatigue_risk_score,\n  username_std as creator_id,\n\n  recommendation_reason\n\nFROM ranked_recommendations\nWHERE recommendation_rank <= daily_limit  -- Respect tier-adjusted daily limits\n  AND recommendation_score > 0.3  -- Minimum quality threshold\nORDER BY page_handle, recommendation_score DESC",
            "disabled": false,
            "fileName": "definitions/messaging/mart/daily_recommendations.sqlx",
            "bigquery": {
                "partitionBy": "recommendation_date",
                "clusterBy": [
                    "page_handle",
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_mart",
                "tier_aware"
            ],
            "actionDescriptor": {
                "description": "Tier-aware daily ranked recommendations solving all 6 core problems with page type intelligence",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_heatmap",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_pricing_feat",
                    "name": "pricing_bands",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_ops_feat",
                    "name": "fatigue_scores",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_tier_assignments",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "tier_baseline_templates",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "tier_weekly_adjustments",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_mart",
                "name": "daily_recommendations",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_mart",
                "name": "enhanced_daily_recommendations",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH active_creators AS (\n  SELECT\n    cta.username_std,\n    cta.page_handle,\n    cta.page_type,\n    cta.final_page_type,\n    cta.full_tier_assignment,\n    cta.messaging_strategy,\n    tbt.base_tier,\n    tbt.base_daily_quota,\n    tbt.min_spacing_minutes,\n    tbt.randomize_offset_minutes,\n    tbt.min_drip_bumps,\n    tbt.max_drip_bumps,\n    tbt.min_renewals,\n    tbt.max_renewals,\n    tbt.min_daily_ppvs,\n    tbt.max_daily_ppvs,\n    tbt.max_tip_campaigns_per_week,\n    tbt.drip_schedule,\n    tbt.renewal_schedule,\n    tbt.ppv_windows,\n    tbt.premium_price_range,\n    tbt.mid_price_range,\n    tbt.teaser_price_range\n  FROM `of-scheduler-proj.eros_messaging_feat.creator_tier_assignments` cta\n  JOIN `of-scheduler-proj.eros_messaging_feat.tier_baseline_templates` tbt\n    ON cta.full_tier_assignment = tbt.tier_id\n  WHERE cta.assignment_date = CURRENT_DATE()\n    AND cta.performance_risk != 'HIGH_RISK'\n),\n\n-- ===== DRIP BUMPS =====\ndrip_slots AS (\n  SELECT\n    ac.username_std,\n    ac.page_handle,\n    ac.page_type,\n    ac.final_page_type,\n    ac.full_tier_assignment,\n    ac.messaging_strategy,\n    ac.base_tier,\n    ac.base_daily_quota,\n    ac.min_spacing_minutes,\n    ac.min_drip_bumps,\n    ac.max_drip_bumps,\n    drip.label AS slot_label,\n    drip.type AS slot_type,\n    drip.hour AS slot_hour,\n    COALESCE(drip.randomize_minutes, ac.randomize_offset_minutes, 0) AS randomize_minutes,\n    TIMESTAMP_ADD(\n      TIMESTAMP(CONCAT(CAST(CURRENT_DATE() AS STRING), ' ', drip.base_time)),\n      INTERVAL CAST(\n        FLOOR(RAND() * (2 * COALESCE(drip.randomize_minutes, ac.randomize_offset_minutes, 0) + 1))\n        - COALESCE(drip.randomize_minutes, ac.randomize_offset_minutes, 0)\n      AS INT64) MINUTE\n    ) AS recommended_send_ts\n  FROM active_creators ac\n  CROSS JOIN UNNEST(ac.drip_schedule) AS drip\n),\n\ndrip_ranked AS (\n  SELECT\n    ds.*,\n    ROW_NUMBER() OVER (\n      PARTITION BY ds.username_std\n      ORDER BY COALESCE(hm.avg_rpm, 0.4) DESC, ds.slot_hour\n    ) AS recommendation_rank,\n    COALESCE(hm.avg_rpm, 0.4) AS timing_score,\n    COALESCE(hm.confidence_level, 'LOW') AS timing_confidence,\n    MAX(COALESCE(hm.avg_rpm, 0.4)) OVER (PARTITION BY ds.username_std) AS max_rpm_for_creator\n  FROM drip_slots ds\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.creator_heatmap` hm\n    ON hm.username_std = ds.username_std\n   AND hm.local_day_of_week = FORMAT_DATE('%A', CURRENT_DATE())\n   AND hm.local_hour = ds.slot_hour\n),\n\ndrip_recommendations AS (\n  SELECT\n    username_std,\n    page_handle,\n    page_type,\n    final_page_type,\n    full_tier_assignment,\n    CURRENT_DATE() AS recommendation_date,\n    recommended_send_ts,\n    'drip_bump' AS message_type,\n    slot_type AS message_subtype,\n    slot_label AS slot_description,\n    recommendation_rank,\n    COALESCE(SAFE_DIVIDE(timing_score, NULLIF(max_rpm_for_creator, 0)), 0.4) * 0.6\n      + CASE timing_confidence WHEN 'HIGH' THEN 0.3 WHEN 'MEDIUM' THEN 0.2 ELSE 0.1 END\n      + CASE messaging_strategy\n          WHEN 'conversion_aggressive' THEN 0.1\n          WHEN 'conversion_intensive' THEN 0.1\n          ELSE 0.05\n        END AS recommendation_score,\n    timing_confidence,\n    'MANDATORY' AS price_tier,\n    0.0 AS suggested_price,\n    GREATEST(70, 100 - (recommendation_rank - 1) * 5) AS fatigue_safety_score,\n    base_daily_quota AS daily_limit,\n    TRUE AS is_mandatory,\n    CONCAT('Mandatory drip • ', slot_label, ' • Tier ', full_tier_assignment, ' • ', timing_confidence, ' timing confidence') AS recommendation_reason,\n    CASE\n      WHEN slot_hour BETWEEN 6 AND 11 THEN 'morning'\n      WHEN slot_hour BETWEEN 12 AND 17 THEN 'afternoon'\n      WHEN slot_hour BETWEEN 18 AND 23 THEN 'evening'\n      ELSE 'late_night'\n    END AS time_energy_required,\n    CASE\n      WHEN slot_hour BETWEEN 6 AND 11 THEN 'Prep warm morning authenticity captions.'\n      WHEN slot_hour BETWEEN 12 AND 17 THEN 'Use playful afternoon captions.'\n      WHEN slot_hour BETWEEN 18 AND 23 THEN 'Lean into evening hype and FOMO.'\n      ELSE 'Go intimate with sleepy late-night confession captions.'\n    END AS caption_guidance,\n    min_spacing_minutes\n  FROM drip_ranked\n  WHERE recommendation_rank <= COALESCE(max_drip_bumps, 6)\n),\n\n-- ===== RENEWALS =====\nrenewal_slots AS (\n  SELECT\n    ac.username_std,\n    ac.page_handle,\n    ac.page_type,\n    ac.final_page_type,\n    ac.full_tier_assignment,\n    ac.messaging_strategy,\n    ac.base_tier,\n    ac.base_daily_quota,\n    ac.min_spacing_minutes,\n    ac.min_renewals,\n    ac.max_renewals,\n    renewal.label AS slot_label,\n    renewal.type AS slot_type,\n    renewal.hour AS slot_hour,\n    TIMESTAMP(CONCAT(CAST(CURRENT_DATE() AS STRING), ' ', renewal.base_time)) AS recommended_send_ts\n  FROM active_creators ac\n  CROSS JOIN UNNEST(ac.renewal_schedule) AS renewal\n),\n\nrenewal_ranked AS (\n  SELECT\n    rs.*,\n    ROW_NUMBER() OVER (\n      PARTITION BY rs.username_std\n      ORDER BY COALESCE(hm.avg_rpm, 0.4) DESC, rs.slot_hour\n    ) AS recommendation_rank,\n    COALESCE(hm.avg_rpm, 0.4) AS timing_score,\n    COALESCE(hm.confidence_level, 'LOW') AS timing_confidence,\n    MAX(COALESCE(hm.avg_rpm, 0.4)) OVER (PARTITION BY rs.username_std) AS max_rpm_for_creator\n  FROM renewal_slots rs\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.creator_heatmap` hm\n    ON hm.username_std = rs.username_std\n   AND hm.local_day_of_week = FORMAT_DATE('%A', CURRENT_DATE())\n   AND hm.local_hour = rs.slot_hour\n),\n\nrenewal_recommendations AS (\n  SELECT\n    username_std,\n    page_handle,\n    page_type,\n    final_page_type,\n    full_tier_assignment,\n    CURRENT_DATE() AS recommendation_date,\n    recommended_send_ts,\n    'renewal_campaign' AS message_type,\n    slot_type AS message_subtype,\n    slot_label AS slot_description,\n    recommendation_rank,\n    COALESCE(SAFE_DIVIDE(timing_score, NULLIF(max_rpm_for_creator, 0)), 0.4) * 0.5\n      + CASE timing_confidence WHEN 'HIGH' THEN 0.35 WHEN 'MEDIUM' THEN 0.25 ELSE 0.15 END\n      + 0.15 AS recommendation_score,\n    timing_confidence,\n    'CAMPAIGN' AS price_tier,\n    0.0 AS suggested_price,\n    85 AS fatigue_safety_score,\n    base_daily_quota AS daily_limit,\n    TRUE AS is_mandatory,\n    CONCAT('Renewal push • ', slot_label, ' • Tier ', full_tier_assignment) AS recommendation_reason,\n    CASE\n      WHEN slot_hour BETWEEN 6 AND 11 THEN 'morning'\n      WHEN slot_hour BETWEEN 12 AND 17 THEN 'afternoon'\n      WHEN slot_hour = 0 THEN 'midnight'\n      ELSE 'evening'\n    END AS time_energy_required,\n    CASE\n      WHEN slot_hour BETWEEN 6 AND 11 THEN 'Lean into gratitude + new month energy.'\n      WHEN slot_hour BETWEEN 12 AND 17 THEN 'Use afternoon reminder captions.'\n      WHEN slot_hour = 0 THEN 'Urgent midnight renewals and deadline language.'\n      ELSE 'Evening renewals with proof and urgency.'\n    END AS caption_guidance,\n    min_spacing_minutes\n  FROM renewal_ranked\n  WHERE recommendation_rank <= COALESCE(max_renewals, 2)\n),\n\n-- ===== PPV WINDOWS =====\nppv_base AS (\n  SELECT\n    dr.username_std,\n    dr.page_handle,\n    dr.page_type,\n    dr.final_page_type,\n    dr.full_tier_assignment,\n    dr.messaging_strategy,\n    dr.recommendation_date,\n    dr.recommended_send_ts,\n    dr.recommendation_rank,\n    dr.recommendation_score,\n    dr.timing_confidence,\n    dr.price_tier,\n    dr.suggested_price,\n    dr.fatigue_safety_score,\n    dr.daily_limit,\n    dr.recommendation_reason,\n    dr.in_tier_window,\n    dr.adjustment_rule\n  FROM `of-scheduler-proj.eros_messaging_mart.daily_recommendations` dr\n  WHERE dr.recommendation_date = CURRENT_DATE()\n),\n\nppv_recommendations AS (\n  SELECT\n    pb.username_std,\n    pb.page_handle,\n    pb.page_type,\n    pb.final_page_type,\n    pb.full_tier_assignment,\n    pb.recommendation_date,\n    pb.recommended_send_ts,\n    'ppv' AS message_type,\n    CASE WHEN pb.in_tier_window THEN 'tier_window' ELSE 'exploratory' END AS message_subtype,\n    CONCAT('PPV window ', pb.recommendation_rank) AS slot_description,\n    pb.recommendation_rank,\n    pb.recommendation_score,\n    pb.timing_confidence,\n    pb.price_tier,\n    pb.suggested_price,\n    pb.fatigue_safety_score,\n    LEAST(\n      COALESCE(ac.max_daily_ppvs, pb.daily_limit),\n      pb.daily_limit\n    ) AS daily_limit,\n    FALSE AS is_mandatory,\n    pb.recommendation_reason,\n    CASE\n      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 6 AND 11 THEN 'morning'\n      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 12 AND 17 THEN 'afternoon'\n      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 18 AND 23 THEN 'evening'\n      ELSE 'late_night'\n    END AS time_energy_required,\n    CASE\n      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 6 AND 11 THEN 'Prime morning PPV: authentic daily start.'\n      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 12 AND 17 THEN 'Afternoon PPV: playful and conversational.'\n      WHEN EXTRACT(HOUR FROM pb.recommended_send_ts) BETWEEN 18 AND 23 THEN 'Prime-time PPV: high-energy tease + social proof.'\n      ELSE 'Late-night PPV: intimate, last-call positioning.'\n    END AS caption_guidance,\n    COALESCE(ac.min_spacing_minutes, 90) AS min_spacing_minutes\n  FROM ppv_base pb\n  LEFT JOIN active_creators ac\n    ON pb.username_std = ac.username_std\n),\n\n-- ===== TIP CAMPAIGNS =====\ntip_candidates AS (\n  SELECT\n    ac.username_std,\n    ac.page_handle,\n    ac.page_type,\n    ac.final_page_type,\n    ac.full_tier_assignment,\n    ac.base_daily_quota,\n    ac.min_spacing_minutes,\n    ac.max_tip_campaigns_per_week,\n    ROW_NUMBER() OVER (PARTITION BY ac.username_std ORDER BY ac.username_std) AS recommendation_rank\n  FROM active_creators ac\n  WHERE ac.max_tip_campaigns_per_week > 0\n),\n\ntip_recommendations AS (\n  SELECT\n    username_std,\n    page_handle,\n    page_type,\n    final_page_type,\n    full_tier_assignment,\n    CURRENT_DATE() AS recommendation_date,\n    TIMESTAMP_ADD(\n      TIMESTAMP(CONCAT(CAST(CURRENT_DATE() AS STRING), ' 15:00')),\n      INTERVAL CAST(FLOOR(RAND() * 120) AS INT64) MINUTE\n    ) AS recommended_send_ts,\n    'tip_campaign' AS message_type,\n    'afternoon_push' AS message_subtype,\n    'Afternoon tip opportunity' AS slot_description,\n    recommendation_rank,\n    0.55 AS recommendation_score,\n    'MEDIUM' AS timing_confidence,\n    'TIP' AS price_tier,\n    0.0 AS suggested_price,\n    70 AS fatigue_safety_score,\n    base_daily_quota AS daily_limit,\n    FALSE AS is_mandatory,\n    'Optional tip: appreciation / social proof window.' AS recommendation_reason,\n    'afternoon' AS time_energy_required,\n    'Lean into appreciation captions with quick proof.' AS caption_guidance,\n    min_spacing_minutes\n  FROM tip_candidates\n  WHERE recommendation_rank <= max_tip_campaigns_per_week\n),\n\n-- ===== COMBINE ALL STREAMS =====\ncombined AS (\n  SELECT * FROM drip_recommendations\n  UNION ALL\n  SELECT * FROM renewal_recommendations\n  UNION ALL\n  SELECT * FROM ppv_recommendations\n  UNION ALL\n  SELECT * FROM tip_recommendations\n),\n\nsequenced AS (\n  SELECT\n    c.*,\n    LAG(recommended_send_ts) OVER (\n      PARTITION BY username_std\n      ORDER BY recommended_send_ts\n    ) AS previous_send_ts\n  FROM combined c\n),\n\nfinal AS (\n  SELECT\n    username_std,\n    page_handle,\n    page_type,\n    final_page_type,\n    full_tier_assignment,\n    recommendation_date,\n    recommended_send_ts,\n    message_type,\n    message_subtype,\n    slot_description,\n    recommendation_rank,\n    recommendation_score,\n    timing_confidence,\n    price_tier,\n    suggested_price,\n    fatigue_safety_score,\n    daily_limit,\n    is_mandatory,\n    recommendation_reason,\n    time_energy_required,\n    caption_guidance,\n    CASE\n      WHEN previous_send_ts IS NULL THEN TRUE\n      WHEN min_spacing_minutes IS NULL THEN TRUE\n      WHEN TIMESTAMP_DIFF(recommended_send_ts, previous_send_ts, MINUTE) >= min_spacing_minutes THEN TRUE\n      ELSE FALSE\n    END AS spacing_ok\n  FROM sequenced\n)\n\nSELECT\n  username_std,\n  page_handle,\n  page_type,\n  final_page_type,\n  full_tier_assignment,\n  recommendation_date,\n  recommended_send_ts,\n  message_type,\n  message_subtype,\n  slot_description,\n  recommendation_rank,\n  recommendation_score,\n  timing_confidence,\n  price_tier,\n  suggested_price,\n  fatigue_safety_score,\n  daily_limit,\n  is_mandatory,\n  CASE\n    WHEN message_type IN ('drip_bump', 'renewal_campaign') THEN 'AI_OPTIMIZED_BASELINE'\n    WHEN recommendation_score >= 0.8 THEN 'HIGH_OPPORTUNITY'\n    WHEN recommendation_score >= 0.6 THEN 'GOOD_OPPORTUNITY'\n    WHEN recommendation_score >= 0.4 THEN 'FAIR_OPPORTUNITY'\n    ELSE 'LOW_CONFIDENCE'\n  END AS opportunity_quality,\n  recommendation_reason,\n  time_energy_required,\n  caption_guidance,\n  spacing_ok,\n  CURRENT_TIMESTAMP() AS created_at\nFROM final\nWHERE is_mandatory OR recommendation_rank <= daily_limit\nORDER BY username_std, recommended_send_ts\n",
            "disabled": false,
            "fileName": "definitions/messaging/mart/enhanced_daily_recommendations.sqlx",
            "bigquery": {
                "partitionBy": "recommendation_date",
                "clusterBy": [
                    "page_handle",
                    "message_type",
                    "recommendation_rank"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_mart",
                "enhanced_scheduling"
            ],
            "actionDescriptor": {
                "description": "Daily scheduling feed blending mandatory drips, renewals, PPVs, and tip campaigns with tier-aware AI scoring.",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_tier_assignments",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "tier_baseline_templates",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_heatmap",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_mart",
                    "name": "daily_recommendations",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_mart",
                "name": "enhanced_daily_recommendations",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_mart",
                "name": "tier_performance_analysis",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH tier_performance_metrics AS (\n  SELECT\n    cta.full_tier_assignment as tier_id,\n    cta.page_type,\n    cta.messaging_strategy,\n    cta.base_tier,\n    CURRENT_DATE() as analysis_date,\n\n    -- Message volume metrics\n    COUNT(DISTINCT cta.page_handle) as pages_in_tier,\n    COUNT(me.message_id) as total_messages_sent,\n    AVG(COUNT(me.message_id)) OVER (PARTITION BY cta.full_tier_assignment) as avg_messages_per_page,\n\n    -- Revenue performance\n    SUM(me.revenue_usd) as total_revenue,\n    AVG(me.revenue_usd) as avg_revenue_per_message,\n    PERCENTILE_CONT(me.revenue_usd, 0.5) OVER (PARTITION BY cta.full_tier_assignment) as median_revenue_per_message,\n\n    -- Conversion metrics\n    SUM(me.purchased_count) as total_purchases,\n    SUM(me.sent_count) as total_recipients,\n    SAFE_DIVIDE(SUM(me.purchased_count), SUM(me.sent_count)) as overall_buy_rate,\n\n    -- Price analysis\n    AVG(me.price_usd) as avg_price_point,\n    SAFE_DIVIDE(SUM(me.revenue_usd), SUM(me.price_usd * me.purchased_count)) as price_realization_rate,\n\n    -- Tier adherence metrics\n    COUNTIF(me.sending_hour BETWEEN 8 AND 22) as messages_in_active_hours,\n    SAFE_DIVIDE(COUNTIF(me.sending_hour BETWEEN 8 AND 22), COUNT(me.message_id)) as active_hours_compliance,\n\n    -- Daily volume adherence\n    COUNT(DISTINCT DATE(me.sending_ts)) as active_days,\n    SAFE_DIVIDE(COUNT(me.message_id), COUNT(DISTINCT DATE(me.sending_ts))) as avg_daily_volume\n\n  FROM `of-scheduler-proj.eros_messaging_feat.creator_tier_assignments` cta\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.messages_enriched` me\n    ON cta.page_handle = CASE\n         WHEN cta.final_page_type = 'BOTH'\n         THEN cta.page_handle\n         ELSE cta.username_std\n       END\n    AND me.sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n  WHERE cta.assignment_date = CURRENT_DATE()\n  GROUP BY 1,2,3,4,5\n),\n\ntier_template_comparison AS (\n  SELECT\n    tpm.*,\n    tbt.min_daily_ppvs as template_min_daily,\n    tbt.max_daily_ppvs as template_max_daily,\n    tbt.premium_price_range.min as template_premium_min,\n    tbt.premium_price_range.max as template_premium_max,\n    tbt.mid_price_range.min as template_mid_min,\n    tbt.mid_price_range.max as template_mid_max,\n\n    -- Template adherence scoring\n    CASE\n      WHEN tpm.avg_daily_volume BETWEEN tbt.min_daily_ppvs AND tbt.max_daily_ppvs THEN 1.0\n      WHEN tpm.avg_daily_volume < tbt.min_daily_ppvs THEN\n        tpm.avg_daily_volume / tbt.min_daily_ppvs\n      ELSE 1.0 - ((tpm.avg_daily_volume - tbt.max_daily_ppvs) / tbt.max_daily_ppvs)\n    END as volume_adherence_score,\n\n    CASE\n      WHEN tpm.avg_price_point BETWEEN tbt.mid_price_range.min AND tbt.premium_price_range.max THEN 1.0\n      WHEN tpm.avg_price_point < tbt.mid_price_range.min THEN\n        tpm.avg_price_point / tbt.mid_price_range.min\n      ELSE 1.0\n    END as pricing_adherence_score\n\n  FROM tier_performance_metrics tpm\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.tier_baseline_templates` tbt\n    ON tpm.tier_id = tbt.tier_id\n),\n\ntier_effectiveness_analysis AS (\n  SELECT\n    ttc.*,\n\n    -- Performance rankings within tier group\n    RANK() OVER (\n      PARTITION BY ttc.base_tier, ttc.page_type\n      ORDER BY ttc.avg_revenue_per_message DESC\n    ) as revenue_rank_within_tier,\n\n    RANK() OVER (\n      PARTITION BY ttc.base_tier, ttc.page_type\n      ORDER BY ttc.overall_buy_rate DESC\n    ) as conversion_rank_within_tier,\n\n    -- Cross-tier performance rankings\n    RANK() OVER (\n      ORDER BY ttc.avg_revenue_per_message DESC\n    ) as overall_revenue_rank,\n\n    RANK() OVER (\n      ORDER BY ttc.overall_buy_rate DESC\n    ) as overall_conversion_rank,\n\n    -- Tier effectiveness scores\n    (ttc.volume_adherence_score * 0.3 +\n     ttc.pricing_adherence_score * 0.3 +\n     ttc.active_hours_compliance * 0.2 +\n     LEAST(ttc.overall_buy_rate / 0.05, 1.0) * 0.2) as tier_adherence_score,\n\n    -- Performance vs expectation\n    CASE ttc.messaging_strategy\n      WHEN 'conversion_aggressive' THEN\n        CASE\n          WHEN ttc.overall_buy_rate >= 0.06 THEN 'exceeds_expectation'\n          WHEN ttc.overall_buy_rate >= 0.04 THEN 'meets_expectation'\n          ELSE 'below_expectation'\n        END\n      WHEN 'retention_quality' THEN\n        CASE\n          WHEN ttc.avg_revenue_per_message >= 15 THEN 'exceeds_expectation'\n          WHEN ttc.avg_revenue_per_message >= 10 THEN 'meets_expectation'\n          ELSE 'below_expectation'\n        END\n      ELSE 'unknown_strategy'\n    END as performance_vs_expectation\n\n  FROM tier_template_comparison ttc\n),\n\nadjustment_effectiveness AS (\n  SELECT\n    tea.tier_id,\n    tea.page_type,\n\n    -- Track adjustment impacts\n    COUNT(DISTINCT twa.page_handle) as pages_with_adjustments,\n    STRING_AGG(DISTINCT twa.adjustment_rule) as active_adjustment_rules,\n    AVG(twa.daily_quota_adjustment) as avg_quota_adjustment,\n    AVG(twa.price_adjustment_usd) as avg_price_adjustment,\n\n    -- Performance after adjustments (last 7 days)\n    AVG(CASE\n      WHEN DATE_DIFF(CURRENT_DATE(), twa.adjustment_date, DAY) <= 7\n      THEN tea.avg_revenue_per_message\n    END) as post_adjustment_rpm,\n\n    AVG(CASE\n      WHEN DATE_DIFF(CURRENT_DATE(), twa.adjustment_date, DAY) <= 7\n      THEN tea.overall_buy_rate\n    END) as post_adjustment_buy_rate\n\n  FROM tier_effectiveness_analysis tea\n  LEFT JOIN `of-scheduler-proj.eros_messaging_feat.tier_weekly_adjustments` twa\n    ON tea.tier_id = twa.full_tier_assignment\n    AND twa.adjustment_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n  GROUP BY 1,2\n)\n\nSELECT\n  tea.analysis_date,\n  tea.tier_id,\n  tea.page_type,\n  tea.messaging_strategy,\n  tea.base_tier,\n  tea.pages_in_tier,\n\n  -- Volume performance\n  tea.total_messages_sent,\n  tea.avg_messages_per_page,\n  tea.avg_daily_volume,\n  tea.template_min_daily,\n  tea.template_max_daily,\n  tea.volume_adherence_score,\n\n  -- Revenue performance\n  tea.total_revenue,\n  tea.avg_revenue_per_message,\n  tea.median_revenue_per_message,\n  tea.revenue_rank_within_tier,\n  tea.overall_revenue_rank,\n\n  -- Conversion performance\n  tea.overall_buy_rate,\n  tea.total_purchases,\n  tea.total_recipients,\n  tea.conversion_rank_within_tier,\n  tea.overall_conversion_rank,\n\n  -- Pricing performance\n  tea.avg_price_point,\n  tea.template_mid_min,\n  tea.template_premium_max,\n  tea.pricing_adherence_score,\n  tea.price_realization_rate,\n\n  -- Adherence and effectiveness\n  tea.active_hours_compliance,\n  tea.tier_adherence_score,\n  tea.performance_vs_expectation,\n\n  -- Adjustment tracking\n  ae.pages_with_adjustments,\n  ae.active_adjustment_rules,\n  ae.avg_quota_adjustment,\n  ae.avg_price_adjustment,\n  ae.post_adjustment_rpm,\n  ae.post_adjustment_buy_rate,\n\n  -- Recommendations for tier optimization\n  CASE\n    WHEN tea.volume_adherence_score < 0.7 THEN 'adjust_volume_targets'\n    WHEN tea.pricing_adherence_score < 0.7 THEN 'review_pricing_bands'\n    WHEN tea.tier_adherence_score < 0.6 THEN 'tier_reassignment_needed'\n    WHEN tea.performance_vs_expectation = 'exceeds_expectation' THEN 'consider_tier_upgrade'\n    WHEN tea.performance_vs_expectation = 'below_expectation' THEN 'performance_intervention_needed'\n    ELSE 'tier_performing_as_expected'\n  END as optimization_recommendation,\n\n  -- Meta\n  CURRENT_TIMESTAMP() as created_at,\n  'tier_analysis_v1' as analysis_version\n\nFROM tier_effectiveness_analysis tea\nLEFT JOIN adjustment_effectiveness ae\n  ON tea.tier_id = ae.tier_id\n  AND tea.page_type = ae.page_type\nWHERE tea.pages_in_tier > 0  -- Only include tiers with actual pages\nORDER BY tea.total_revenue DESC, tea.avg_revenue_per_message DESC",
            "disabled": false,
            "fileName": "definitions/messaging/mart/tier_performance_analysis.sqlx",
            "bigquery": {
                "partitionBy": "analysis_date",
                "clusterBy": [
                    "tier_id",
                    "page_type"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_mart",
                "tier_performance"
            ],
            "actionDescriptor": {
                "description": "Performance analysis and effectiveness tracking for tier-based messaging system",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "mart"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_tier_assignments",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "tier_baseline_templates",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "tier_weekly_adjustments",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_mart",
                "name": "tier_performance_analysis",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "view",
            "target": {
                "schema": "eros_messaging_srv",
                "name": "scheduler_dashboard",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nSELECT\n  sa.scheduler_code,\n  sa.scheduler_display_name,\n  sa.scheduler_email,\n  sa.group_email,\n  r.username_std,\n  r.message_type,\n  r.message_subtype,\n  r.recommended_send_ts,\n  r.recommendation_rank,\n  r.opportunity_quality,\n  r.price_tier,\n  r.suggested_price,\n  r.recommendation_reason,\n  CASE\n    WHEN r.fatigue_safety_score < 30 THEN '🔴 HIGH FATIGUE RISK'\n    WHEN r.fatigue_safety_score < 60 THEN '🟡 MODERATE FATIGUE'\n    ELSE '🟢 SAFE TO SEND'\n  END AS fatigue_status,\n  CASE\n    WHEN r.recommendation_score >= 0.8 THEN '⭐⭐⭐ EXCELLENT'\n    WHEN r.recommendation_score >= 0.6 THEN '⭐⭐ GOOD'\n    WHEN r.recommendation_score >= 0.4 THEN '⭐ FAIR'\n    ELSE '⚠️ LOW CONFIDENCE'\n  END AS opportunity_summary\nFROM `of-scheduler-proj.eros_messaging_mart.enhanced_daily_recommendations` r\nJOIN `of-scheduler-proj.eros_source.scheduler_assignments` sa\n  ON r.username_std = sa.username_std\nWHERE r.recommendation_date = CURRENT_DATE()\n  AND (r.is_mandatory OR r.recommendation_rank <= 3)\nORDER BY sa.scheduler_code, r.recommended_send_ts\n",
            "disabled": false,
            "fileName": "definitions/messaging/srv/scheduler_dashboard.sqlx",
            "bigquery": {
                "partitionBy": "",
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "srv"
                }
            },
            "tags": [
                "messaging_srv"
            ],
            "actionDescriptor": {
                "description": "Scheduler dashboard summary combining enhanced recommendations with roster context",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "srv"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_mart",
                    "name": "enhanced_daily_recommendations",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_source",
                    "name": "scheduler_assignments",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_srv",
                "name": "scheduler_dashboard",
                "database": "of-scheduler-proj"
            },
            "enumType": "VIEW"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_messaging_stg",
                "name": "captions",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH \nppv_captions AS (\n  SELECT \n    FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('CAPTION' AS col_0, 'PPV' AS col_1, CAST(caption_id AS STRING) AS col_2))) as caption_sk,\n    'PPV' as caption_type,\n    caption_text,\n    CURRENT_DATE() as loaded_date,\n    CURRENT_TIMESTAMP() as loaded_at\n  FROM `of-scheduler-proj.eros_source.caption_bank_ppv_final`\n  WHERE caption_text IS NOT NULL\n),\n\ntip_captions AS (\n  SELECT\n    FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('CAPTION' AS col_0, 'TIP' AS col_1, CAST(tip_campaign_id AS STRING) AS col_2))) as caption_sk,\n    'TIP' as caption_type,\n    caption_text,\n    CURRENT_DATE() as loaded_date,\n    CURRENT_TIMESTAMP() as loaded_at\n  FROM `of-scheduler-proj.eros_source.caption_bank_tip_final`\n  WHERE caption_text IS NOT NULL\n),\n\nrenew_captions AS (\n  SELECT\n    FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('CAPTION' AS col_0, 'RENEW' AS col_1, CAST(renew_campaign_id AS STRING) AS col_2))) as caption_sk,\n    'RENEW' as caption_type,\n    caption_text,\n    CURRENT_DATE() as loaded_date,\n    CURRENT_TIMESTAMP() as loaded_at\n  FROM `of-scheduler-proj.eros_source.caption_bank_renew_final`\n  WHERE caption_text IS NOT NULL\n),\n\nbump_captions AS (\n  SELECT \n    FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('CAPTION' AS col_0, 'BUMP' AS col_1, CAST(caption_id AS STRING) AS col_2))) as caption_sk,\n    'BUMP' as caption_type,\n    caption_text,\n    CURRENT_DATE() as loaded_date,\n    CURRENT_TIMESTAMP() as loaded_at\n  FROM `of-scheduler-proj.eros_source.caption_bank_bump_final`\n  WHERE caption_text IS NOT NULL\n)\n\nSELECT * FROM ppv_captions\nUNION ALL\nSELECT * FROM tip_captions  \nUNION ALL\nSELECT * FROM renew_captions\nUNION ALL\nSELECT * FROM bump_captions\n",
            "disabled": false,
            "fileName": "definitions/messaging/stg/captions.sqlx",
            "bigquery": {
                "partitionBy": "loaded_date",
                "clusterBy": [
                    "caption_type"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "stg"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "messaging_stg"
            ],
            "actionDescriptor": {
                "description": "Caption bank data for content analysis and optimization",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "stg"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_source",
                    "name": "caption_bank_ppv_final",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_source",
                    "name": "caption_bank_tip_final",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_source",
                    "name": "caption_bank_renew_final",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_source",
                    "name": "caption_bank_bump_final",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_stg",
                "name": "captions",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "incremental",
            "target": {
                "schema": "eros_messaging_stg",
                "name": "mass_messages",
                "database": "of-scheduler-proj"
            },
            "query": "\n\n\n\n/*\n * MASS MESSAGES - INCREMENTAL STAGING TABLE\n *\n * Purpose: Consolidates historical and daily mass message data with incremental updates\n *\n * Partitioning Strategy:\n * - Partitioned by sending_date for cost-efficient queries\n * - Requires partition filter to prevent expensive full table scans\n * - Uses 14-day watermark to capture late-arriving data\n *\n * Incremental Logic:\n * - Primary watermark: sending_ts (timestamp precision)\n * - Lookback window: 14 days to catch delayed records\n * - Deduplication: QUALIFY with ROW_NUMBER to ensure unique message_sk\n *\n * Data Quality:\n * - Enforces non-null constraints on key fields\n * - Validates unique message_sk\n * - Monitors for data freshness\n */\n\nWITH\nhistorical_source AS (\n  SELECT\n    CAST(message_id AS STRING) as message_id,\n    CAST(sender AS STRING) as sender,\n    CAST(sending_time AS STRING) as sending_time,\n    CAST(price AS STRING) as price,\n    SAFE_CAST(sent AS INT64) as sent,\n    SAFE_CAST(viewed AS INT64) as viewed,\n    SAFE_CAST(purchased AS INT64) as purchased,\n    CAST(earnings AS STRING) as earnings,\n    message as message_text,\n    'historical' as source_file\n  FROM `of-scheduler-proj.eros_source.facts_messages_all`\n  WHERE sending_time IS NOT NULL AND TRIM(sending_time) != ''\n),\n\ndaily_source AS (\n  SELECT\n    CAST(message_id AS STRING) as message_id,\n    CAST(sender AS STRING) as sender,\n    CAST(sending_time AS STRING) as sending_time,\n    CAST(price AS STRING) as price,\n    SAFE_CAST(sent AS INT64) as sent,\n    SAFE_CAST(viewed AS INT64) as viewed,\n    SAFE_CAST(purchased AS INT64) as purchased,\n    CAST(earnings AS STRING) as earnings,\n    message as message_text,\n    'daily' as source_file\n  FROM `of-scheduler-proj.eros_source.mass_message_daily_final`\n  WHERE sending_time IS NOT NULL AND TRIM(sending_time) != ''\n),\n\nmessages_unioned AS (\n  SELECT * FROM historical_source\n  UNION ALL\n  SELECT * FROM daily_source\n),\n\nmessages_cleaned AS (\n  SELECT\n    FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('MASS_MESSAGES' AS col_0, CAST(message_id AS STRING) AS col_1, source_file AS col_2))) as message_sk,\n    LOWER(REGEXP_REPLACE(TRIM(sender), r'[^a-z0-9_]', '_')) as username_std,\n    COALESCE(\n      SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', sending_time),\n      SAFE.PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', sending_time)\n    ) as sending_ts,\n    SAFE_CAST(NULLIF(REGEXP_REPLACE(price, r'[^0-9.-]', ''), '') AS FLOAT64) as price,\n    sent as sent_count,\n    viewed as viewed_count,\n    purchased as purchased_count, \n    SAFE_CAST(NULLIF(REGEXP_REPLACE(earnings, r'[^0-9.-]', ''), '') AS FLOAT64) as earnings_total,\n    message_text,\n    source_file,\n    CURRENT_TIMESTAMP() as loaded_at\n  FROM messages_unioned\n),\n\nmessages_final AS (\n  SELECT\n    *,\n    DATE(sending_ts) as sending_date\n  FROM messages_cleaned\n  WHERE sending_ts IS NOT NULL\n)\n\nSELECT * FROM messages_final\nWHERE\n  -- ALWAYS include partition filter for performance and cost control\n  sending_date >= DATE('2024-01-01')  -- Historical cutoff\n  AND sending_date <= CURRENT_DATE()  -- No future dates\n\n\n\nQUALIFY ROW_NUMBER() OVER (\n  PARTITION BY message_sk\n  ORDER BY loaded_at DESC\n) = 1",
            "disabled": false,
            "protected": false,
            "postOps": [
                "\n  ALTER TABLE `of-scheduler-proj.eros_messaging_stg.mass_messages` SET OPTIONS (require_partition_filter = TRUE);\n"
            ],
            "fileName": "definitions/messaging/stg/mass_messages.sqlx",
            "bigquery": {
                "partitionBy": "sending_date",
                "clusterBy": [
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "stg"
                }
            },
            "tags": [
                "messaging_stg"
            ],
            "actionDescriptor": {
                "description": "Incremental mass messages with 14-day watermark and robust partition handling",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "messaging",
                    "layer": "stg"
                }
            },
            "incrementalQuery": "\n\n\n\n/*\n * MASS MESSAGES - INCREMENTAL STAGING TABLE\n *\n * Purpose: Consolidates historical and daily mass message data with incremental updates\n *\n * Partitioning Strategy:\n * - Partitioned by sending_date for cost-efficient queries\n * - Requires partition filter to prevent expensive full table scans\n * - Uses 14-day watermark to capture late-arriving data\n *\n * Incremental Logic:\n * - Primary watermark: sending_ts (timestamp precision)\n * - Lookback window: 14 days to catch delayed records\n * - Deduplication: QUALIFY with ROW_NUMBER to ensure unique message_sk\n *\n * Data Quality:\n * - Enforces non-null constraints on key fields\n * - Validates unique message_sk\n * - Monitors for data freshness\n */\n\nWITH\nhistorical_source AS (\n  SELECT\n    CAST(message_id AS STRING) as message_id,\n    CAST(sender AS STRING) as sender,\n    CAST(sending_time AS STRING) as sending_time,\n    CAST(price AS STRING) as price,\n    SAFE_CAST(sent AS INT64) as sent,\n    SAFE_CAST(viewed AS INT64) as viewed,\n    SAFE_CAST(purchased AS INT64) as purchased,\n    CAST(earnings AS STRING) as earnings,\n    message as message_text,\n    'historical' as source_file\n  FROM `of-scheduler-proj.eros_source.facts_messages_all`\n  WHERE sending_time IS NOT NULL AND TRIM(sending_time) != ''\n),\n\ndaily_source AS (\n  SELECT\n    CAST(message_id AS STRING) as message_id,\n    CAST(sender AS STRING) as sender,\n    CAST(sending_time AS STRING) as sending_time,\n    CAST(price AS STRING) as price,\n    SAFE_CAST(sent AS INT64) as sent,\n    SAFE_CAST(viewed AS INT64) as viewed,\n    SAFE_CAST(purchased AS INT64) as purchased,\n    CAST(earnings AS STRING) as earnings,\n    message as message_text,\n    'daily' as source_file\n  FROM `of-scheduler-proj.eros_source.mass_message_daily_final`\n  WHERE sending_time IS NOT NULL AND TRIM(sending_time) != ''\n),\n\nmessages_unioned AS (\n  SELECT * FROM historical_source\n  UNION ALL\n  SELECT * FROM daily_source\n),\n\nmessages_cleaned AS (\n  SELECT\n    FARM_FINGERPRINT(TO_JSON_STRING(STRUCT('MASS_MESSAGES' AS col_0, CAST(message_id AS STRING) AS col_1, source_file AS col_2))) as message_sk,\n    LOWER(REGEXP_REPLACE(TRIM(sender), r'[^a-z0-9_]', '_')) as username_std,\n    COALESCE(\n      SAFE.PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', sending_time),\n      SAFE.PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', sending_time)\n    ) as sending_ts,\n    SAFE_CAST(NULLIF(REGEXP_REPLACE(price, r'[^0-9.-]', ''), '') AS FLOAT64) as price,\n    sent as sent_count,\n    viewed as viewed_count,\n    purchased as purchased_count, \n    SAFE_CAST(NULLIF(REGEXP_REPLACE(earnings, r'[^0-9.-]', ''), '') AS FLOAT64) as earnings_total,\n    message_text,\n    source_file,\n    CURRENT_TIMESTAMP() as loaded_at\n  FROM messages_unioned\n),\n\nmessages_final AS (\n  SELECT\n    *,\n    DATE(sending_ts) as sending_date\n  FROM messages_cleaned\n  WHERE sending_ts IS NOT NULL\n)\n\nSELECT * FROM messages_final\nWHERE\n  -- ALWAYS include partition filter for performance and cost control\n  sending_date >= DATE('2024-01-01')  -- Historical cutoff\n  AND sending_date <= CURRENT_DATE()  -- No future dates\n\n\n  -- Additional incremental filters for recent data\n  AND sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n  AND (\n    -- New records based on timestamp watermark\n    sending_ts > COALESCE(\n      (SELECT MAX(sending_ts)\n       FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n       WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)),\n      TIMESTAMP('2024-01-01')\n    )\n    -- Or recently loaded records (catch late arrivals)\n    OR loaded_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR)\n  )\n\n\nQUALIFY ROW_NUMBER() OVER (\n  PARTITION BY message_sk\n  ORDER BY loaded_at DESC\n) = 1",
            "dependencyTargets": [
                {
                    "schema": "eros_source",
                    "name": "facts_messages_all",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_source",
                    "name": "mass_message_daily_final",
                    "database": "of-scheduler-proj"
                }
            ],
            "incrementalPostOps": [
                "\n  ALTER TABLE `of-scheduler-proj.eros_messaging_stg.mass_messages` SET OPTIONS (require_partition_filter = TRUE);\n"
            ],
            "uniqueKey": [
                "message_sk"
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_messaging_stg",
                "name": "mass_messages",
                "database": "of-scheduler-proj"
            },
            "enumType": "INCREMENTAL",
            "onSchemaChange": "IGNORE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_ops_feat",
                "name": "fatigue_scores",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH \ndaily_volumes AS (\n  SELECT \n    username_std,\n    sending_date,\n    COUNT(*) as messages_sent,\n    SUM(sent_count) as total_recipients,\n    AVG(rpm) as daily_avg_rpm\n  FROM `of-scheduler-proj.eros_messaging_feat.messages_enriched`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n  GROUP BY username_std, sending_date\n),\n\nrolling_patterns AS (\n  SELECT\n    username_std,\n    sending_date as score_date,\n\n    -- 7-day rolling metrics (PROBLEM 3: FATIGUE)\n    AVG(messages_sent) OVER (\n      PARTITION BY username_std\n      ORDER BY sending_date\n      ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n    ) as avg_daily_volume_7d,\n\n    AVG(daily_avg_rpm) OVER (\n      PARTITION BY username_std\n      ORDER BY sending_date\n      ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n    ) as avg_rpm_7d,\n\n    -- Performance trend detection\n    daily_avg_rpm - LAG(daily_avg_rpm, 7) OVER (\n      PARTITION BY username_std ORDER BY sending_date\n    ) as rpm_change_7d\n\n  FROM daily_volumes\n),\n\nscored_patterns AS (\n  SELECT\n    username_std,\n    score_date,\n    avg_daily_volume_7d,\n    avg_rpm_7d,\n    rpm_change_7d,\n\n    -- Fatigue risk scoring (0-100, higher = more risk)\n    LEAST(100, GREATEST(0,\n      50 + (avg_daily_volume_7d - 3) * 10 - COALESCE(rpm_change_7d * 20, 0)\n    )) as fatigue_risk_score\n  FROM rolling_patterns\n)\n\nSELECT\n  username_std,\n  score_date,\n  avg_daily_volume_7d,\n  avg_rpm_7d,\n  rpm_change_7d,\n  fatigue_risk_score,\n\n  -- Recommendations\n  CASE\n    WHEN avg_daily_volume_7d >= 5 AND rpm_change_7d < -0.1 THEN 'REDUCE_VOLUME'\n    WHEN avg_daily_volume_7d <= 1 AND rpm_change_7d > 0.1 THEN 'INCREASE_VOLUME'\n    ELSE 'MAINTAIN'\n  END as volume_recommendation,\n\n  -- Safe daily limits\n  CASE\n    WHEN fatigue_risk_score >= 80 THEN 1\n    WHEN fatigue_risk_score >= 60 THEN 2\n    WHEN fatigue_risk_score >= 40 THEN 3\n    ELSE 4\n  END as recommended_max_daily\n\nFROM scored_patterns\nWHERE score_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)",
            "disabled": false,
            "fileName": "definitions/ops/feat/fatigue_scores.sqlx",
            "bigquery": {
                "partitionBy": "score_date",
                "clusterBy": [
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "feat"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "ops_feat"
            ],
            "actionDescriptor": {
                "description": "Daily fatigue scores to prevent over-messaging",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_ops_feat",
                "name": "fatigue_scores",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_ops_mart",
                "name": "learning_insights",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH \ntiming_insights AS (\n  SELECT \n    'TIMING_OPTIMIZATION' as insight_category,\n    username_std,\n    CURRENT_DATE() as insight_date,\n    CONCAT(\n      'Creator performs best on ', local_day_of_week, \n      ' at ', local_hour, ':00 with avg $', \n      ROUND(avg_rpm, 2), ' RPM (',\n      confidence_level, ' confidence)'\n    ) as insight_text,\n    avg_rpm as insight_value,\n    confidence_level as insight_confidence\n  FROM `of-scheduler-proj.eros_messaging_feat.creator_heatmap`\n  WHERE rpm_rank_for_creator <= 3  -- Top 3 time slots\n),\n\npricing_insights AS (\n  SELECT \n    'PRICING_STRATEGY' as insight_category,\n    username_std,\n    CURRENT_DATE() as insight_date,\n    CONCAT(\n      'Recommended pricing tier: ', recommended_price_tier,\n      ' (avg $', ROUND(avg_rpm, 2), ' RPM)',\n      CASE \n        WHEN price_conversion_correlation > 0.3 THEN ' - Strong price-conversion correlation'\n        WHEN price_conversion_correlation < -0.3 THEN ' - Price sensitivity detected'\n        ELSE ' - Neutral price response'\n      END\n    ) as insight_text,\n    avg_rpm as insight_value,\n    CASE \n      WHEN recommended_price_tier = 'PREMIUM' THEN 'HIGH'\n      WHEN recommended_price_tier = 'HIGH' THEN 'MEDIUM'\n      ELSE 'LOW'\n    END as insight_confidence\n  FROM `of-scheduler-proj.eros_pricing_feat.pricing_bands`\n  WHERE avg_rpm > 0.5  -- Filter out low-performing slots\n),\n\nfatigue_insights AS (\n  SELECT \n    'FATIGUE_MANAGEMENT' as insight_category,\n    username_std,\n    score_date as insight_date,\n    CONCAT(\n      'Fatigue risk: ', ROUND(fatigue_risk_score), '/100. ',\n      'Recommended action: ', volume_recommendation,\n      '. Safe daily limit: ', recommended_max_daily, ' messages'\n    ) as insight_text,\n    fatigue_risk_score as insight_value,\n    CASE \n      WHEN fatigue_risk_score >= 80 THEN 'HIGH'\n      WHEN fatigue_risk_score >= 40 THEN 'MEDIUM'\n      ELSE 'LOW'\n    END as insight_confidence\n  FROM `of-scheduler-proj.eros_ops_feat.fatigue_scores`\n  WHERE score_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n),\n\nall_insights AS (\n  SELECT * FROM timing_insights\n  UNION ALL\n  SELECT * FROM pricing_insights\n  UNION ALL\n  SELECT * FROM fatigue_insights\n)\n\nSELECT\n  insight_category,\n  username_std,\n  insight_date,\n  insight_text,\n  insight_value,\n  insight_confidence,\n  -- Quality scoring for insight prioritization\n  CASE\n    WHEN insight_confidence = 'HIGH' AND insight_value > 1.0 THEN 'ACTIONABLE'\n    WHEN insight_confidence = 'MEDIUM' AND insight_value > 0.5 THEN 'REVIEW'\n    ELSE 'MONITOR'\n  END as insight_priority,\n\n  CURRENT_TIMESTAMP() as generated_at\n\nFROM all_insights\nWHERE insight_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)",
            "disabled": false,
            "fileName": "definitions/ops/mart/learning_insights.sqlx",
            "bigquery": {
                "partitionBy": "insight_date",
                "clusterBy": [
                    "insight_category"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "mart"
                },
                "requirePartitionFilter": true
            },
            "tags": [
                "ops_mart"
            ],
            "actionDescriptor": {
                "description": "Learning insights capturing human expertise and system performance patterns",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "mart"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_ops_feat",
                    "name": "fatigue_scores",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_messaging_feat",
                    "name": "creator_heatmap",
                    "database": "of-scheduler-proj"
                },
                {
                    "schema": "eros_pricing_feat",
                    "name": "pricing_bands",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_ops_mart",
                "name": "learning_insights",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_ops",
                "name": "send_log",
                "database": "of-scheduler-proj"
            },
            "query": "-- Partition contract: 'action_date' is DATE and stable; require_partition_filter enforced via post_operations.\n\n\n\n-- This creates the ops logging table structure\n-- It will be populated by the Apps Script when schedulers take actions\n\nSELECT\n  CURRENT_TIMESTAMP() as action_ts,\n  CURRENT_DATE() as action_date,\n  'sample_hash' as tracking_hash,\n  'sample_creator' as username_std,\n  'main' as page_type,\n  'sample_creator__main' as username_page,\n  'SAMPLE' as scheduler_code,\n  'sample@erosops.com' as scheduler_email,\n  CURRENT_DATE() as date_local,\n  14 as hod_local,\n  19.99 as price_usd,\n  'sample_caption_id' as caption_id,\n  'Planned' as status,\n  'caption_selected' as action,\n  'sheets_hub_v1' as source\nLIMIT 0  -- This ensures no actual data is inserted, just creates the schema\n\n\n",
            "disabled": false,
            "postOps": [
                "\n  ALTER TABLE `of-scheduler-proj.eros_ops.send_log` SET OPTIONS (require_partition_filter = TRUE);\n"
            ],
            "fileName": "definitions/ops/send_log.sqlx",
            "bigquery": {
                "partitionBy": "action_date",
                "clusterBy": [
                    "scheduler_code",
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "logging"
                }
            },
            "tags": [
                "ops",
                "logging",
                "scheduler"
            ],
            "actionDescriptor": {
                "description": "Activity log for scheduler actions and message sending",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "logging"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_ops",
                "name": "send_log",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_ops_stg",
                "name": "scheduler_overrides_ext",
                "database": "of-scheduler-proj"
            },
            "query": "\n\n-- This model is disabled because the source data is not available.\n-- It creates an empty table with the correct schema.\nSELECT \n  CAST(NULL AS STRING) as override_sk,\n  CAST(NULL AS STRING) as username_std,\n  CAST(NULL AS DATE) as override_date,\n  CAST(NULL AS STRING) as override_type,\n  CAST(NULL AS STRING) as override_reason,\n  CAST(NULL AS STRING) as scheduler_code,\n  CAST(NULL AS TIMESTAMP) as loaded_at\nLIMIT 0\n",
            "disabled": false,
            "fileName": "definitions/ops/stg/scheduler_overrides_ext.sqlx",
            "bigquery": {
                "clusterBy": [
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "stg"
                }
            },
            "tags": [
                "ops_stg"
            ],
            "actionDescriptor": {
                "description": "External scheduler overrides and manual interventions",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "stg"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_ops_stg",
                "name": "scheduler_overrides_ext",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_pricing_feat",
                "name": "pricing_bands",
                "database": "of-scheduler-proj"
            },
            "query": "\n\nWITH\ncreator_price_bands AS (\n  -- CTE 1: Calculate overall price percentiles for each creator.\n  -- Using DISTINCT gets us one row per creator with their price bands.\n  SELECT DISTINCT\n    username_std,\n    PERCENTILE_CONT(price, 0.25) OVER (PARTITION BY username_std) as price_p25,\n    PERCENTILE_CONT(price, 0.50) OVER (PARTITION BY username_std) as price_p50,\n    PERCENTILE_CONT(price, 0.75) OVER (PARTITION BY username_std) as price_p75,\n    PERCENTILE_CONT(price, 0.90) OVER (PARTITION BY username_std) as price_p90\n  FROM `of-scheduler-proj.eros_messaging_feat.messages_enriched`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)\n    AND price > 0\n),\n\ncreator_hourly_performance AS (\n  -- CTE 2: Calculate performance metrics for each creator at each specific time slot.\n  SELECT\n    username_std,\n    local_hour,\n    local_day_of_week,\n    AVG(rpm) as avg_rpm,\n    CORR(price, purchased_count) as price_conversion_correlation\n  FROM `of-scheduler-proj.eros_messaging_feat.messages_enriched`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)\n    AND price > 0\n  GROUP BY\n    username_std,\n    local_hour,\n    local_day_of_week\n)\n\n-- Final Step: Join the price bands and hourly performance data.\nSELECT\n  hp.username_std,\n  hp.local_hour,\n  hp.local_day_of_week,\n\n  -- Dynamic pricing bands (SOLVES PROBLEM 2)\n  pb.price_p25 as price_low,\n  pb.price_p50 as price_medium,\n  pb.price_p75 as price_high,\n  pb.price_p90 as price_premium,\n\n  -- Pricing intelligence\n  hp.avg_rpm,\n  hp.price_conversion_correlation,\n\n  -- Band assignment logic\n  CASE\n    WHEN hp.avg_rpm >= 2.0 THEN 'PREMIUM'\n    WHEN hp.avg_rpm >= 1.0 THEN 'HIGH'\n    WHEN hp.avg_rpm >= 0.5 THEN 'MEDIUM'\n    ELSE 'LOW'\n  END as recommended_price_tier\n\nFROM creator_hourly_performance hp\nLEFT JOIN creator_price_bands pb\n  ON hp.username_std = pb.username_std",
            "disabled": false,
            "fileName": "definitions/pricing/feat/pricing_bands.sqlx",
            "bigquery": {
                "clusterBy": [
                    "username_std"
                ],
                "labels": {
                    "app": "eros",
                    "domain": "pricing",
                    "layer": "feat"
                }
            },
            "tags": [
                "pricing_feat"
            ],
            "actionDescriptor": {
                "description": "Dynamic pricing bands based on performance data",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "pricing",
                    "layer": "feat"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_feat",
                    "name": "messages_enriched",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_pricing_feat",
                "name": "pricing_bands",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_source",
                "name": "scheduler_assignments",
                "database": "of-scheduler-proj"
            },
            "query": "\n\n-- Master assignment list keyed by scheduler code. Join to the roster to expose\n-- contact information for Google Group-based RBAC while keeping creator mapping\n-- centralized inside BigQuery.\nWITH assignments AS (\n  -- MOCHI Assignments\n  SELECT 'MOCHI' AS scheduler_code, 'kassie_lee' AS creator_username, 'PAID' AS page_type, 'A' AS tier, 'Explicit' AS content_style\n  UNION ALL SELECT 'MOCHI', 'kassie_lee_free', 'FREE', 'A', 'Explicit'\n\n  -- LYN Assignments\n  UNION ALL SELECT 'LYN', 'scarlett_grace', 'FREE', 'A', 'Implied'\n  UNION ALL SELECT 'LYN', 'aurora_benson', 'FREE', 'B', 'Implied'\n  UNION ALL SELECT 'LYN', 'stormii', 'PAID', 'C', 'Implied'\n  UNION ALL SELECT 'LYN', 'sophia_grace', 'FREE', 'D', 'Implied'\n\n  -- PAM Assignments\n  UNION ALL SELECT 'PAM', 'ms_lexa', 'PAID', 'A', 'Explicit'\n  UNION ALL SELECT 'PAM', 'ms_lexa_free', 'FREE', 'A', 'Explicit'\n  UNION ALL SELECT 'PAM', 'alex_love', 'FREE', 'C', 'Explicit'\n\n  -- JAY Assignments\n  UNION ALL SELECT 'JAY', 'grace_bennet', 'PAID', 'A', 'Implied'\n  UNION ALL SELECT 'JAY', 'grace_bennet_free', 'FREE', 'A', 'Implied'\n  UNION ALL SELECT 'JAY', 'corvette_mikayla', 'FREE', 'D', 'Explicit'\n  UNION ALL SELECT 'JAY', 'talia', 'FREE', 'B', 'Implied'\n\n  -- KEVIN Assignments\n  UNION ALL SELECT 'KEVIN', 'mia_harper', 'FREE', 'A', 'Implied'\n  UNION ALL SELECT 'KEVIN', 'carmen_rose', 'FREE', 'C', 'Explicit'\n\n  -- MAYETTE Assignments\n  UNION ALL SELECT 'MAYETTE', 'jade_bri', 'PAID', 'A', 'Semi-Explicit'\n  UNION ALL SELECT 'MAYETTE', 'jade_valentine', 'FREE', 'B', 'Explicit'\n  UNION ALL SELECT 'MAYETTE', 'lola_rivers', 'FREE', 'C', 'Explicit'\n\n  -- CHU Assignments\n  UNION ALL SELECT 'CHU', 'olivia_hansley', 'PAID', 'A', 'Implied'\n  UNION ALL SELECT 'CHU', 'olivia_hansley_free', 'FREE', 'A', 'Implied'\n  UNION ALL SELECT 'CHU', 'taylor_wild', 'FREE', 'B', 'Implied'\n  UNION ALL SELECT 'CHU', 'aspyn_hayes', 'FREE', 'C', 'Implied'\n\n  -- AC Assignments\n  UNION ALL SELECT 'AC', 'madison_summers', 'FREE', 'A', 'Implied'\n  UNION ALL SELECT 'AC', 'selena', 'PAID', 'C', 'Implied'\n  UNION ALL SELECT 'AC', 'cali_love', 'FREE', 'C', 'Implied'\n  UNION ALL SELECT 'AC', 'mia_foster', 'FREE', 'D', 'Implied'\n\n  -- GEORGE Assignments\n  UNION ALL SELECT 'GEORGE', 'tessa_tan', 'FREE', 'A', 'Implied'\n  UNION ALL SELECT 'GEORGE', 'dianna_grace', 'FREE', 'B', 'Explicit'\n  UNION ALL SELECT 'GEORGE', 'tessa_dove', 'FREE', 'D', 'Implied'\n\n  -- STAN Assignments\n  UNION ALL SELECT 'STAN', 'tessa_thomas', 'PAID', 'B', 'Explicit'\n  UNION ALL SELECT 'STAN', 'tessa_thomas_free', 'FREE', 'B', 'Explicit'\n  UNION ALL SELECT 'STAN', 'francesca_le', 'PAID', 'B', 'Explicit'\n  UNION ALL SELECT 'STAN', 'adrianna_rodriguez', 'FREE', 'C', 'Implied'\n  UNION ALL SELECT 'STAN', 'neenah_brown', 'PAID', 'C', 'Implied'\n\n  -- JOHN Assignments\n  UNION ALL SELECT 'JOHN', 'jade_wilkinson', 'FREE', 'C', 'Explicit'\n  UNION ALL SELECT 'JOHN', 'ann_grayson', 'PAID', 'C', 'Implied'\n  UNION ALL SELECT 'JOHN', 'isabelle_layla', 'FREE', 'D', 'Implied'\n  UNION ALL SELECT 'JOHN', 'kayleigh_ashford', 'FREE', 'D', 'Implied'\n  UNION ALL SELECT 'JOHN', 'nora_rhodes', 'FREE', 'D', 'Implied'\n\n  -- Pending creator assignments for Ronmar, Phil, Camsy, Mishy will be added later.\n)\n, enriched AS (\n  SELECT\n    a.scheduler_code,\n    r.scheduler_email,\n    r.group_email,\n    r.display_name AS scheduler_display_name,\n    r.is_active,\n    r.is_manager,\n    r.assigned_creators,\n    a.creator_username,\n    a.page_type,\n    a.tier,\n    a.content_style,\n    -- Provide both username_std and page_handle aliases for downstream usage\n    a.creator_username AS username_std,\n    a.creator_username AS page_handle,\n    CONCAT(a.tier, '_', a.page_type) AS full_tier_assignment\n  FROM assignments a\n  LEFT JOIN `of-scheduler-proj.eros_source.scheduler_roster` r USING (scheduler_code)\n)\n\nSELECT\n  scheduler_code,\n  scheduler_email,\n  group_email,\n  scheduler_display_name,\n  is_manager,\n  assigned_creators,\n  username_std,\n  page_handle,\n  page_type,\n  tier,\n  full_tier_assignment,\n  content_style\nFROM enriched\nWHERE is_active\nORDER BY scheduler_code, username_std\n",
            "disabled": false,
            "fileName": "definitions/sources/scheduler_assignments.sqlx",
            "bigquery": {
                "labels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "source"
                }
            },
            "tags": [
                "scheduler",
                "assignments",
                "source"
            ],
            "actionDescriptor": {
                "description": "Master scheduler to creator assignments for the EROS system",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "source"
                }
            },
            "dependencyTargets": [
                {
                    "schema": "eros_source",
                    "name": "scheduler_roster",
                    "database": "of-scheduler-proj"
                }
            ],
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "scheduler_assignments",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        },
        {
            "type": "table",
            "target": {
                "schema": "eros_source",
                "name": "scheduler_roster",
                "database": "of-scheduler-proj"
            },
            "query": "\n\n-- Centralized roster for all schedulers.\n-- Each member authenticates with the Google Group: eros-schedulers-bq@erosops.com\nSELECT * FROM (\n  SELECT\n    'PAM' AS scheduler_code,\n    'Pam' AS display_name,\n    'geesushee07@gmail.com' AS scheduler_email,\n    'eros-schedulers-bq@erosops.com' AS group_email,\n    TRUE AS is_active,\n    FALSE AS is_manager,\n    3 AS assigned_creators\n\n  UNION ALL SELECT 'KEVIN', 'Kevin', 'kevinicer@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 2\n  UNION ALL SELECT 'RONMAR', 'Ronmar', 'bundaronmar@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 0\n  UNION ALL SELECT 'MAYETTE', 'Mayette', 'yette.palculio322@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 3\n  UNION ALL SELECT 'JAY', 'Jay', 'chappneerjz@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 4\n  UNION ALL SELECT 'AC', 'AC', 'accanda103@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 4\n  UNION ALL SELECT 'PHIL', 'Phil', 'llacunap@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 0\n  UNION ALL SELECT 'LYN', 'Lyn', 'rileyainfs06@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 4\n  UNION ALL SELECT 'CAMSY', 'Camsy', 'chikass013@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 0\n  UNION ALL SELECT 'GEORGE', 'George', 'nielsenflores27@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 3\n  UNION ALL SELECT 'CHU', 'Chu', 'cholocruz1612@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 4\n  UNION ALL SELECT 'MISHY', 'Mishy', 'mish.llenren@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 0\n  UNION ALL SELECT 'JOHN', 'John', 'ejgabanes.work@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 5\n  UNION ALL SELECT 'STAN', 'Stan', 'stan.olmedo28@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 5\n  UNION ALL SELECT 'MOCHI', 'Mochi', 'baby.f.j.dayandayan@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, FALSE, 2\n  UNION ALL SELECT 'NIELLE', 'Nielle (Manager)', 'niefredeluces@gmail.com', 'eros-schedulers-bq@erosops.com', TRUE, TRUE, 0\n) roster\nORDER BY scheduler_code\n",
            "disabled": false,
            "fileName": "definitions/sources/scheduler_roster.sqlx",
            "bigquery": {
                "labels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "source"
                }
            },
            "tags": [
                "scheduler",
                "roster",
                "source"
            ],
            "actionDescriptor": {
                "description": "Scheduler roster with codes, contact emails, and assignment metadata",
                "bigqueryLabels": {
                    "app": "eros",
                    "domain": "ops",
                    "layer": "source"
                }
            },
            "hermeticity": "NON_HERMETIC",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "scheduler_roster",
                "database": "of-scheduler-proj"
            },
            "enumType": "TABLE"
        }
    ],
    "assertions": [
        {
            "query": "\n\nSELECT recommended_price_tier, COUNT(*) as invalid_count\nFROM `of-scheduler-proj.eros_pricing_feat.pricing_bands`\nWHERE recommended_price_tier NOT IN ('LOW', 'MEDIUM', 'HIGH', 'PREMIUM')\nGROUP BY recommended_price_tier\nHAVING COUNT(*) > 0",
            "fileName": "definitions/assertions/accepted_values/price_tier_values.sqlx",
            "target": {
                "schema": "eros_assertions",
                "name": "price_tier_values",
                "database": "of-scheduler-proj"
            },
            "tags": [
                "data_quality",
                "accepted_values"
            ],
            "actionDescriptor": {
                "description": "Price tier values must be from accepted list"
            },
            "dependencyTargets": [
                {
                    "schema": "eros_pricing_feat",
                    "name": "pricing_bands",
                    "database": "of-scheduler-proj"
                }
            ],
            "canonicalTarget": {
                "schema": "eros_assertions",
                "name": "price_tier_values",
                "database": "of-scheduler-proj"
            }
        },
        {
            "query": "\n\nSELECT\n  MAX(sending_ts) as latest_message_ts,\n  TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(sending_ts), HOUR) as hours_lag\nFROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\nWHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\nHAVING hours_lag > 24",
            "fileName": "definitions/assertions/freshness/mass_messages_freshness.sqlx",
            "target": {
                "schema": "eros_assertions",
                "name": "mass_messages_freshness",
                "database": "of-scheduler-proj"
            },
            "tags": [
                "data_quality",
                "freshness"
            ],
            "actionDescriptor": {
                "description": "Mass messages must be fresh within 24 hours"
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                }
            ],
            "canonicalTarget": {
                "schema": "eros_assertions",
                "name": "mass_messages_freshness",
                "database": "of-scheduler-proj"
            }
        },
        {
            "query": "\n\n/*\n * PARTITION PRESENCE CHECK FOR MASS_MESSAGES\n *\n * This assertion fails if there are no rows in the last 2 days,\n * which helps detect data pipeline failures or missing partitions\n */\n\n-- Fail if there are no rows in the last 2 days\nSELECT 1 AS failing  -- Named column for VIEW\nFROM UNNEST([1]) AS _\nWHERE NOT EXISTS (\n  SELECT 1\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n  LIMIT 1\n)",
            "fileName": "definitions/assertions/quality/mass_messages_partition_check.sqlx",
            "target": {
                "schema": "eros_assertions",
                "name": "mass_messages_partition_check",
                "database": "of-scheduler-proj"
            },
            "tags": [
                "quality",
                "mass_messages",
                "freshness"
            ],
            "actionDescriptor": {
                "description": "Ensures mass_messages table has recent data (last 2 days)"
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                }
            ],
            "canonicalTarget": {
                "schema": "eros_assertions",
                "name": "mass_messages_partition_check",
                "database": "of-scheduler-proj"
            }
        },
        {
            "query": "\n\n/* QUALITY CHECKS FOR mass_messages */\n\n-- Compose checks as UNION ALL of failure rows\nSELECT * FROM (\n  -- Check 1: duplicate message_sk in the last 14 days\n  SELECT\n    'DUPLICATE_MESSAGE_SK' AS failing_row_condition,\n    message_sk,\n    COUNT(*) AS dup_count\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n  GROUP BY message_sk\n  HAVING COUNT(*) > 1\n\n  UNION ALL\n\n  -- Check 2: NULL keys (should not happen)\n  SELECT\n    'NULL_KEYS' AS failing_row_condition,\n    message_sk,\n    1 AS cnt\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n    AND (message_sk IS NULL OR username_std IS NULL OR sending_date IS NULL)\n\n  UNION ALL\n\n  -- Check 3: Invalid date ranges\n  SELECT\n    'INVALID_DATES' AS failing_row_condition,\n    message_sk,\n    1 AS cnt\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n    AND (sending_date < DATE '2020-01-01' OR sending_date > DATE '2030-01-01')\n\n  UNION ALL\n\n  -- Check 4: Invalid prices\n  SELECT\n    'INVALID_PRICES' AS failing_row_condition,\n    message_sk,\n    1 AS cnt\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n    AND price IS NOT NULL\n    AND (price < 0 OR price > 1000)\n) AS failures",
            "fileName": "definitions/assertions/quality/mass_messages_quality.sqlx",
            "target": {
                "schema": "eros_assertions",
                "name": "mass_messages_quality",
                "database": "of-scheduler-proj"
            },
            "tags": [
                "quality",
                "mass_messages"
            ],
            "actionDescriptor": {
                "description": "Data quality checks for mass_messages table"
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                }
            ],
            "canonicalTarget": {
                "schema": "eros_assertions",
                "name": "mass_messages_quality",
                "database": "of-scheduler-proj"
            }
        },
        {
            "query": "\n\n-- Fail if any row is older than 14 days\nSELECT 1 AS failing\nFROM UNNEST([1]) AS _\nWHERE EXISTS (\n  SELECT 1\n  FROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\n  WHERE sending_date < DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n  LIMIT 1\n)",
            "fileName": "definitions/assertions/quality/mass_messages_row_window.sqlx",
            "target": {
                "schema": "eros_assertions",
                "name": "mass_messages_row_window",
                "database": "of-scheduler-proj"
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                }
            ],
            "canonicalTarget": {
                "schema": "eros_assertions",
                "name": "mass_messages_row_window",
                "database": "of-scheduler-proj"
            }
        },
        {
            "query": "\n\n-- Fail if duplicate message_sk exists in the last 14 days\nSELECT message_sk\nFROM `of-scheduler-proj.eros_messaging_stg.mass_messages`\nWHERE sending_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\nGROUP BY message_sk\nHAVING COUNT(*) > 1",
            "fileName": "definitions/assertions/quality/mass_messages_unique_key.sqlx",
            "target": {
                "schema": "eros_assertions",
                "name": "mass_messages_unique_key",
                "database": "of-scheduler-proj"
            },
            "dependencyTargets": [
                {
                    "schema": "eros_messaging_stg",
                    "name": "mass_messages",
                    "database": "of-scheduler-proj"
                }
            ],
            "canonicalTarget": {
                "schema": "eros_assertions",
                "name": "mass_messages_unique_key",
                "database": "of-scheduler-proj"
            }
        }
    ],
    "projectConfig": {
        "warehouse": "bigquery",
        "defaultSchema": "eros_messaging_stg",
        "assertionSchema": "eros_assertions",
        "defaultDatabase": "of-scheduler-proj",
        "vars": {
            "raw_schema": "eros_source"
        },
        "defaultLocation": "US"
    },
    "graphErrors": {},
    "declarations": [
        {
            "target": {
                "schema": "eros_source",
                "name": "mass_message_daily_final",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "mass_message_daily_final",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "facts_messages_all",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "facts_messages_all",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "caption_bank_ppv_final",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "caption_bank_ppv_final",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "caption_bank_tip_final",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "caption_bank_tip_final",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "caption_bank_renew_final",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "caption_bank_renew_final",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "caption_bank_bump_final",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "caption_bank_bump_final",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "creator_statistics_final",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "creator_statistics_final",
                "database": "of-scheduler-proj"
            }
        },
        {
            "target": {
                "schema": "eros_source",
                "name": "scheduler_overrides_external",
                "database": "of-scheduler-proj"
            },
            "fileName": "definitions/sources.js",
            "canonicalTarget": {
                "schema": "eros_source",
                "name": "scheduler_overrides_external",
                "database": "of-scheduler-proj"
            }
        }
    ],
    "dataformCoreVersion": "3.0.33",
    "targets": [
        {
            "schema": "eros_assertions",
            "name": "price_tier_values",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_assertions",
            "name": "mass_messages_freshness",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_assertions",
            "name": "mass_messages_partition_check",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_assertions",
            "name": "mass_messages_quality",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_assertions",
            "name": "mass_messages_row_window",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_assertions",
            "name": "mass_messages_unique_key",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_core_dim",
            "name": "dim_creator_timezone",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_core",
            "name": "vw_week_slots_7d_rbac",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "authenticity_monitor",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "caption_bank_drip",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "caption_bank_renewal",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "caption_bank_tip",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "caption_theme_signals",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "creator_heatmap",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "creator_page_assignments",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "creator_tier_assignments",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "messages_enriched",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "tier_baseline_templates",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_feat",
            "name": "tier_weekly_adjustments",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_mart",
            "name": "caption_rank_next24_v3_tbl",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_mart",
            "name": "daily_recommendations",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_mart",
            "name": "enhanced_daily_recommendations",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_mart",
            "name": "tier_performance_analysis",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_srv",
            "name": "scheduler_dashboard",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_stg",
            "name": "captions",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_messaging_stg",
            "name": "mass_messages",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_ops_feat",
            "name": "fatigue_scores",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_ops_mart",
            "name": "learning_insights",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_ops",
            "name": "send_log",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_ops_stg",
            "name": "scheduler_overrides_ext",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_pricing_feat",
            "name": "pricing_bands",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "mass_message_daily_final",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "facts_messages_all",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "caption_bank_ppv_final",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "caption_bank_tip_final",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "caption_bank_renew_final",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "caption_bank_bump_final",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "creator_statistics_final",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "scheduler_overrides_external",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "scheduler_assignments",
            "database": "of-scheduler-proj"
        },
        {
            "schema": "eros_source",
            "name": "scheduler_roster",
            "database": "of-scheduler-proj"
        }
    ]
}

